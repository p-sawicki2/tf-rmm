{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d10cc9eb_f8cc5a0e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-22T15:03:14Z",
      "side": 1,
      "message": "host_test",
      "range": {
        "startLine": 14,
        "startChar": 50,
        "endLine": 14,
        "endChar": 60
      },
      "revId": "6f83bd6fb69937ce3d0219c6816c48f3aaaae281",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a8fd06a_9e073f51",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 16,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-22T15:03:14Z",
      "side": 1,
      "message": "It would be useful to fold this invocation as well as a cmake rule\n\nand the rule invocation could invoke this make command.\n\ncmake --build build -- run_unittests\n\nthis target should be present only host_test platform and can be defined in the platform layer.",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 16,
        "endChar": 29
      },
      "revId": "6f83bd6fb69937ce3d0219c6816c48f3aaaae281",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96155f00_bb854d84",
        "filename": "CMakeLists.txt",
        "patchSetId": 3
      },
      "lineNbr": 72,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-22T12:59:58Z",
      "side": 1,
      "message": "I think we can do some work if possible to move more of unittests specifics to the host_test platform.\n\nThis is a proposal, I am not sure whether it will work or not. \n\nDefine a config variable RMM_UNITTESTS which is OFF by default. The host_tests platform would set this variable to ON.\n\nThis include can be done within the platform layer.",
      "revId": "6f83bd6fb69937ce3d0219c6816c48f3aaaae281",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08c6a801_b06397ae",
        "filename": "CMakeLists.txt",
        "patchSetId": 3
      },
      "lineNbr": 120,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-22T12:59:58Z",
      "side": 1,
      "message": "We can try to move this to the platform layer, there is a dependancy here that this should only run only after all the makefiles have been consumed by the configure stage. \n\nOne way to get this to execute later would be to add a custom target for this and have this execute during the build stage with the appropriate dependency.",
      "range": {
        "startLine": 117,
        "startChar": 0,
        "endLine": 120,
        "endChar": 21
      },
      "revId": "6f83bd6fb69937ce3d0219c6816c48f3aaaae281",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa14a15f_9d648323",
        "filename": "cmake/Modules/UnitTestFramework.cmake",
        "patchSetId": 3
      },
      "lineNbr": 19,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-22T12:59:58Z",
      "side": 1,
      "message": "is a closing `]` missing ?",
      "range": {
        "startLine": 19,
        "startChar": 64,
        "endLine": 19,
        "endChar": 65
      },
      "revId": "6f83bd6fb69937ce3d0219c6816c48f3aaaae281",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f2d4401_22223bd2",
        "filename": "cmake/Modules/UnitTestFramework.cmake",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-22T12:59:58Z",
      "side": 1,
      "message": "use space",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 21,
        "endChar": 1
      },
      "revId": "6f83bd6fb69937ce3d0219c6816c48f3aaaae281",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b29f9bf6_5bd48b57",
        "filename": "cmake/Modules/UnitTestFramework.cmake",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-22T12:59:58Z",
      "side": 1,
      "message": "1 time is good as default I think.",
      "range": {
        "startLine": 46,
        "startChar": 39,
        "endLine": 46,
        "endChar": 41
      },
      "revId": "6f83bd6fb69937ce3d0219c6816c48f3aaaae281",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9e7e0b8_5aac8fe3",
        "filename": "cmake/Modules/UnitTestFramework.cmake",
        "patchSetId": 3
      },
      "lineNbr": 87,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-22T12:59:58Z",
      "side": 1,
      "message": "I think we should not rely on random tests in unit tests to verify the required boundary conditions. \n\nIf there are indeed random tests then I think they can be a different test group and we can specify the ITERATIONS to 100 or some number.",
      "range": {
        "startLine": 87,
        "startChar": 32,
        "endLine": 87,
        "endChar": 34
      },
      "revId": "6f83bd6fb69937ce3d0219c6816c48f3aaaae281",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36ec3a46_f37b3329",
        "filename": "cmake/Modules/UnitTestFramework.cmake",
        "patchSetId": 3
      },
      "lineNbr": 91,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-22T12:59:58Z",
      "side": 1,
      "message": "nit: use space.",
      "range": {
        "startLine": 91,
        "startChar": 0,
        "endLine": 91,
        "endChar": 1
      },
      "revId": "6f83bd6fb69937ce3d0219c6816c48f3aaaae281",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27caf416_cda2df11",
        "filename": "cmake/Modules/UnitTestFramework.cmake",
        "patchSetId": 3
      },
      "lineNbr": 94,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-22T12:59:58Z",
      "side": 1,
      "message": "use space.",
      "range": {
        "startLine": 94,
        "startChar": 0,
        "endLine": 94,
        "endChar": 1
      },
      "revId": "6f83bd6fb69937ce3d0219c6816c48f3aaaae281",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9cfffae_f75672b3",
        "filename": "lib/arch/include/fake_host/cpuid.h",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-22T12:59:58Z",
      "side": 1,
      "message": "should this be a test helper rather than a generic fake_host arch helper ?",
      "revId": "6f83bd6fb69937ce3d0219c6816c48f3aaaae281",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "873df977_294acee1",
        "filename": "plat/host/CMakeLists.txt",
        "patchSetId": 3
      },
      "lineNbr": 7,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-22T12:59:58Z",
      "side": 1,
      "message": "we can remove the RMM_ from the name as this is a platform specific variant.",
      "range": {
        "startLine": 7,
        "startChar": 9,
        "endLine": 7,
        "endChar": 13
      },
      "revId": "6f83bd6fb69937ce3d0219c6816c48f3aaaae281",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ff05e8b_29a23a21",
        "filename": "plat/host/host_test/include/plat_test_harness.h",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-22T14:16:09Z",
      "side": 1,
      "message": "maybe test_harness.h is enough as the header name ?",
      "revId": "6f83bd6fb69937ce3d0219c6816c48f3aaaae281",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0317517e_81017e52",
        "filename": "plat/host/host_test/include/plat_test_harness.h",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-22T14:16:09Z",
      "side": 1,
      "message": "Have a brief description of functions expected to be declared here :\n\n/* The below functions are to be defined by the tests and allow the tests to implement specific host harness APIs as defined in host_harness.h */",
      "revId": "6f83bd6fb69937ce3d0219c6816c48f3aaaae281",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60e2f516_ecedb8e2",
        "filename": "plat/host/host_test/include/test_helpers.h",
        "patchSetId": 3
      },
      "lineNbr": 8,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-22T14:16:09Z",
      "side": 1,
      "message": "Have a brief note here about functions expected to be declared here:\n\nGeneric helpers provided by the host_test for use by the Tests. The functions defined here are expected to be invoked only by the tests and defined by the host_test platform.",
      "revId": "6f83bd6fb69937ce3d0219c6816c48f3aaaae281",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a3ad8c4_804aaef6",
        "filename": "plat/host/host_test/include/test_helpers.h",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-22T14:16:09Z",
      "side": 1,
      "message": "test_helper_\n\nMaybe we should call this test_helper_rmm_start()  ?",
      "range": {
        "startLine": 9,
        "startChar": 5,
        "endLine": 9,
        "endChar": 24
      },
      "revId": "6f83bd6fb69937ce3d0219c6816c48f3aaaae281",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54d6c1a1_a4f91959",
        "filename": "plat/host/host_test/include/test_helpers.h",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-22T14:16:09Z",
      "side": 1,
      "message": "test_helper_get_nr_granules()",
      "range": {
        "startLine": 10,
        "startChar": 13,
        "endLine": 10,
        "endChar": 42
      },
      "revId": "6f83bd6fb69937ce3d0219c6816c48f3aaaae281",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "afbd4ecf_49679a9a",
        "filename": "plat/host/host_test/src/test_helpers.c",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-22T14:16:09Z",
      "side": 1,
      "message": "Maybe all the regs should be multi CPU as default. This way this function will initialize the values for N CPUs directly.",
      "range": {
        "startLine": 85,
        "startChar": 7,
        "endLine": 85,
        "endChar": 30
      },
      "revId": "6f83bd6fb69937ce3d0219c6816c48f3aaaae281",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d76f6288_52dea96c",
        "filename": "plat/host/host_test/src/test_helpers.c",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-22T14:16:09Z",
      "side": 1,
      "message": "see comment above, this may not be needed.",
      "range": {
        "startLine": 91,
        "startChar": 0,
        "endLine": 92,
        "endChar": 44
      },
      "revId": "6f83bd6fb69937ce3d0219c6816c48f3aaaae281",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84090410_d1192d4d",
        "filename": "plat/host/host_test/src/test_helpers.c",
        "patchSetId": 3
      },
      "lineNbr": 110,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-22T14:16:09Z",
      "side": 1,
      "message": "Instead of a host arch helper, this should be a host_util_  which will set the `n` for the tpidr_el2[n] read.",
      "range": {
        "startLine": 110,
        "startChar": 1,
        "endLine": 110,
        "endChar": 15
      },
      "revId": "6f83bd6fb69937ce3d0219c6816c48f3aaaae281",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3cf99936_8943a147",
        "filename": "plat/host/host_test/src/test_helpers.c",
        "patchSetId": 3
      },
      "lineNbr": 154,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-22T14:29:40Z",
      "side": 1,
      "message": "we discussed this previously, this function should track if the setup is already done and skip setup if called again. Currently the tests seem to keep track which should be changed.",
      "revId": "6f83bd6fb69937ce3d0219c6816c48f3aaaae281",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}