{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4ebdbe62_c117e40f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-02-14T10:22:58Z",
      "side": 1,
      "message": "Perhaps retain the 64 bit variants and use the 16/8 bit variants only granule struct.\n\nEspecially the spin_lock as I suspect that 8 bit spin lock may have some performance penalty over 32 bit locks. So keep the regular spin_lock and use 8 bit spin lock only for this granule struct.",
      "revId": "9d4081231f65b2cc95308fb5dee2255c6129c92d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cfaf9d59_b6c6268f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-02-14T11:19:20Z",
      "side": 1,
      "message": "OK. Then we need to define a new spin_lock_byte_t type.",
      "parentUuid": "4ebdbe62_c117e40f",
      "revId": "9d4081231f65b2cc95308fb5dee2255c6129c92d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57fb24b5_6d318029",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-02-14T11:31:06Z",
      "side": 1,
      "message": "yes, a new type. we can sort out names later on , but your suggestion sounds fine.",
      "parentUuid": "cfaf9d59_b6c6268f",
      "revId": "9d4081231f65b2cc95308fb5dee2255c6129c92d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c3e96a3_94c0a81a",
        "filename": "lib/arch/include/fake_host/atomics.h",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-02-14T10:22:58Z",
      "side": 1,
      "message": "perhaps keep the 64 bit variants and just add new functions for 16 bits",
      "revId": "9d4081231f65b2cc95308fb5dee2255c6129c92d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "589ba6c9_78f49574",
        "filename": "lib/arch/include/fake_host/atomics.h",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-02-14T11:19:20Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "9c3e96a3_94c0a81a",
      "revId": "9d4081231f65b2cc95308fb5dee2255c6129c92d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "469d893c_2ee2d446",
        "filename": "lib/arch/include/fake_host/atomics.h",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-02-14T10:22:58Z",
      "side": 1,
      "message": "16",
      "range": {
        "startLine": 21,
        "startChar": 31,
        "endLine": 21,
        "endChar": 33
      },
      "revId": "9d4081231f65b2cc95308fb5dee2255c6129c92d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "31532b7e_dc866b13",
        "filename": "lib/arch/include/fake_host/atomics.h",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-02-14T11:19:20Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "469d893c_2ee2d446",
      "range": {
        "startLine": 21,
        "startChar": 31,
        "endLine": 21,
        "endChar": 33
      },
      "revId": "9d4081231f65b2cc95308fb5dee2255c6129c92d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "776e8706_c1f297cc",
        "filename": "lib/arch/include/fake_host/atomics.h",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-02-14T10:22:58Z",
      "side": 1,
      "message": "use uint16_t ?",
      "range": {
        "startLine": 27,
        "startChar": 1,
        "endLine": 27,
        "endChar": 15
      },
      "revId": "9d4081231f65b2cc95308fb5dee2255c6129c92d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c90cc5a_b2d09700",
        "filename": "lib/arch/include/fake_host/atomics.h",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-02-14T11:19:20Z",
      "side": 1,
      "message": "Then it should be\nlong atomic_load_add_release_16(uint16_t *loc, uint16_t val)\nand \"uint16_t refcount\" in \"struct granule\". Are we going for that?",
      "parentUuid": "776e8706_c1f297cc",
      "range": {
        "startLine": 27,
        "startChar": 1,
        "endLine": 27,
        "endChar": 15
      },
      "revId": "9d4081231f65b2cc95308fb5dee2255c6129c92d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76d03a74_d77b1141",
        "filename": "lib/arch/include/fake_host/atomics.h",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-02-14T11:31:06Z",
      "side": 1,
      "message": "if we need precise sizes, it is better to specify the exact size I think. This depends on the knock on effect of this change to all the callers, so need to see the change and then we can take a call.",
      "parentUuid": "3c90cc5a_b2d09700",
      "range": {
        "startLine": 27,
        "startChar": 1,
        "endLine": 27,
        "endChar": 15
      },
      "revId": "9d4081231f65b2cc95308fb5dee2255c6129c92d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}