{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "57e31b87_9264634e",
        "filename": "lib/rmm_el3_ifc/include/rmm_el3_ifc.h",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-06T10:17:30Z",
      "side": 1,
      "message": "nit: `num_banks` ?",
      "range": {
        "startLine": 89,
        "startChar": 10,
        "endLine": 89,
        "endChar": 19
      },
      "revId": "9213c61d53e0290c0461f79da5b74fa5132b7b76",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "12dd0605_d86f9220",
        "filename": "lib/rmm_el3_ifc/include/rmm_el3_ifc.h",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2023-01-10T18:06:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "57e31b87_9264634e",
      "range": {
        "startLine": 89,
        "startChar": 10,
        "endLine": 89,
        "endChar": 19
      },
      "revId": "9213c61d53e0290c0461f79da5b74fa5132b7b76",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38ffefb8_f0b1d244",
        "filename": "lib/rmm_el3_ifc/include/rmm_el3_ifc.h",
        "patchSetId": 2
      },
      "lineNbr": 90,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-06T10:17:30Z",
      "side": 1,
      "message": "nit: `*banks`",
      "range": {
        "startLine": 90,
        "startChar": 19,
        "endLine": 90,
        "endChar": 28
      },
      "revId": "9213c61d53e0290c0461f79da5b74fa5132b7b76",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8dedd71c_6d8a7d29",
        "filename": "lib/rmm_el3_ifc/include/rmm_el3_ifc.h",
        "patchSetId": 2
      },
      "lineNbr": 90,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2023-01-10T18:06:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "38ffefb8_f0b1d244",
      "range": {
        "startLine": 90,
        "startChar": 19,
        "endLine": 90,
        "endChar": 28
      },
      "revId": "9213c61d53e0290c0461f79da5b74fa5132b7b76",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c35d994c_5252fd7e",
        "filename": "lib/rmm_el3_ifc/include/rmm_el3_ifc.h",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-06T10:17:30Z",
      "side": 1,
      "message": "chksum..\n\nthe RMM-EL3 spec should specify how the chksum is calculated.",
      "range": {
        "startLine": 91,
        "startChar": 10,
        "endLine": 91,
        "endChar": 19
      },
      "revId": "9213c61d53e0290c0461f79da5b74fa5132b7b76",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "413617ad_77f38478",
        "filename": "lib/rmm_el3_ifc/include/rmm_el3_ifc.h",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2023-01-10T18:06:10Z",
      "side": 1,
      "message": "trusted-firmware-a\\docs\\components\\rmm-el3-comms-spec.rst will be updated later",
      "parentUuid": "c35d994c_5252fd7e",
      "range": {
        "startLine": 91,
        "startChar": 10,
        "endLine": 91,
        "endChar": 19
      },
      "revId": "9213c61d53e0290c0461f79da5b74fa5132b7b76",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0af89d98_30975299",
        "filename": "lib/rmm_el3_ifc/include/rmm_el3_ifc.h",
        "patchSetId": 2
      },
      "lineNbr": 122,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-06T10:17:30Z",
      "side": 1,
      "message": "Add a comment : ... info structure if setup by EL3 Firmware. Available from v0.2 of Boot manifest. \n\nIf the EL3 firmware is v0.1 or the platform in EL3 has not populated this field, this these API will return NULL pointer.",
      "revId": "9213c61d53e0290c0461f79da5b74fa5132b7b76",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d6ac323_7cd8ef5b",
        "filename": "lib/rmm_el3_ifc/include/rmm_el3_ifc.h",
        "patchSetId": 2
      },
      "lineNbr": 122,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-06T11:05:42Z",
      "side": 1,
      "message": "should we make this function return an error code and then return the address as a return arg ? \n\nI have given suggestion in later comment to enhance this function and rename this to  rmm_el3_ifc_get_dram_data_validated_pa()",
      "parentUuid": "0af89d98_30975299",
      "revId": "9213c61d53e0290c0461f79da5b74fa5132b7b76",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f64b8cf_0fa2659c",
        "filename": "lib/rmm_el3_ifc/include/rmm_el3_ifc.h",
        "patchSetId": 2
      },
      "lineNbr": 122,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2023-01-11T18:59:12Z",
      "side": 1,
      "message": "\"If the EL3 firmware is v0.1 or the platform in EL3 has not populated this field...\"\nAs per you suggestion\n\"How about embedding a new struct dram_info in rmm_manifest ?\", please see\nhttps://review.trustedfirmware.org/c/TF-A/trusted-firmware-a/+/18435/comment/4ff36ddc_092c17c5/\n\nstruct dram_info plat_dram;\nis now part of Boot manifest core structure:\n\n/* DRAM layout info structure */\nstruct dram_info {\n\tuint64_t num_banks;\t\t/* Number of DRAM banks */\n\tstruct dram_bank *banks;\t/* Pointer to dram_banks[] */\n\tuint64_t checksum;\t\t/* Checksum of dram_info data */\n};\n\n/* Boot manifest core structure as per v0.2 */\nstruct rmm_core_manifest {\n\tuint32_t version;\t\t/* Manifest version */\n\tuint32_t padding;\t\t/* RES0 */\n\tuintptr_t plat_data;\t\t/* Manifest platform data */\n\tstruct dram_info plat_dram;\t/* Platform DRAM data */\n};\n\nEL3 firmware v0.1 is not aware of this new added data structure and doesn\u0027t clear memory beyond \u0027plat_data\u0027 when passing BM to RMM.\nIn that case it is possible to validate only \u0027num_banks\u0027 member of \u0027dram_info\u0027, which should be (!\u003d0 \u0026\u0026 \u003c\u003d platform\u0027s max_num_banks). Pointer *banks is not initialised and \u0027dram_bank[]\u0027 cannot be accessed for validation.\nrmm_el3_ifc_get_dram_data_validated_pa() must check Boot Manifest Version before accessing \nstruct dram_info plat_dram and report E_RMM_BOOT_MANIFEST_VERSION_NOT_SUPPORTED in case of version \u003c 0.2.\nFor v0.2+ in case of DRAM data errors rmm_el3_ifc_get_dram_data_validated_pa() will return NULL which\ncan be passed to fvp_set_dram_layout() which will report E_RMM_BOOT_MANIFEST_DATA_ERROR in that case.\n\nAnther option is to check for NULL in plat_setup():\n\t/*\n\t * Validate DRAM data and get pointer\n\t * to the platform DRAM info structure\n\t */\n\tplat_dram \u003d rmm_el3_ifc_get_dram_data_validated_pa(MAX_DRAM_NUM_BANKS);\n\nand report error:\n\n\t/* Validate DRAM info pointer */\n\tif (plat_dram \u003d\u003d NULL) {\n\t\tERROR(\"DRAM data error\\n\");\n\t\trmm_el3_ifc_report_fail_to_el3(E_RMM_BOOT_MANIFEST_DATA_ERROR);\n\t}",
      "parentUuid": "3d6ac323_7cd8ef5b",
      "revId": "9213c61d53e0290c0461f79da5b74fa5132b7b76",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce1ea9ec_165d3039",
        "filename": "lib/rmm_el3_ifc/include/rmm_el3_ifc.h",
        "patchSetId": 2
      },
      "lineNbr": 178,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-06T10:17:30Z",
      "side": 1,
      "message": "Since this is only used within the component, this can go in a priv header `rmm_el3_ifc_priv.h`.",
      "range": {
        "startLine": 178,
        "startChar": 13,
        "endLine": 178,
        "endChar": 17
      },
      "revId": "9213c61d53e0290c0461f79da5b74fa5132b7b76",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe974d75_ad307846",
        "filename": "lib/rmm_el3_ifc/include/rmm_el3_ifc.h",
        "patchSetId": 2
      },
      "lineNbr": 178,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-06T11:05:42Z",
      "side": 1,
      "message": "This is being used by FVP so need to be a public API. So keep this here and prefix with rmm_el3_ifc_ to the function name.",
      "parentUuid": "ce1ea9ec_165d3039",
      "range": {
        "startLine": 178,
        "startChar": 13,
        "endLine": 178,
        "endChar": 17
      },
      "revId": "9213c61d53e0290c0461f79da5b74fa5132b7b76",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "89298b7a_fc1c6638",
        "filename": "lib/rmm_el3_ifc/include/rmm_el3_ifc.h",
        "patchSetId": 2
      },
      "lineNbr": 178,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2023-01-10T18:06:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fe974d75_ad307846",
      "range": {
        "startLine": 178,
        "startChar": 13,
        "endLine": 178,
        "endChar": 17
      },
      "revId": "9213c61d53e0290c0461f79da5b74fa5132b7b76",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6dabba8d_8735e366",
        "filename": "lib/rmm_el3_ifc/src/rmm_el3_ifc.c",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-06T10:17:30Z",
      "side": 1,
      "message": "as discussed, keep the original explicit check even for boolean variables.",
      "revId": "9213c61d53e0290c0461f79da5b74fa5132b7b76",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "21c2fdbf_a3087158",
        "filename": "lib/rmm_el3_ifc/src/rmm_el3_ifc.c",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2023-01-10T18:06:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6dabba8d_8735e366",
      "revId": "9213c61d53e0290c0461f79da5b74fa5132b7b76",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6bd3dcaf_c0a2a25b",
        "filename": "lib/rmm_el3_ifc/src/rmm_el3_ifc_manifest.c",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-06T10:17:30Z",
      "side": 1,
      "message": "I suspect none of the flush dcache is required because unlike TF-A, RMM turns on Cache before MMU is enabled. If that is the case, could you remove all the flush_dcache_range() and run with FVP cache state modelling enabled to see if this works well ?",
      "revId": "9213c61d53e0290c0461f79da5b74fa5132b7b76",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25ff7e2b_06bed909",
        "filename": "lib/rmm_el3_ifc/src/rmm_el3_ifc_manifest.c",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2023-01-10T18:06:10Z",
      "side": 1,
      "message": "Will keep it for now, as per our discussion.",
      "parentUuid": "6bd3dcaf_c0a2a25b",
      "revId": "9213c61d53e0290c0461f79da5b74fa5132b7b76",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aeea9284_999d9ed1",
        "filename": "plat/fvp/src/fvp_granule.c",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-06T10:17:30Z",
      "side": 1,
      "message": "This is one of the performance critical functions and it seems there is some optimization we can do later.\n\nIf a new plat_ api is introduced to check the Addr and this API can `assume` that the addr is validated and within range, then the check reduces to \n\n\"if addr[bit 35] is set, then add idx_bank_1 offset to idx\"\n\n\nFor now, this is OK, we can do a follow on patch later.",
      "revId": "9213c61d53e0290c0461f79da5b74fa5132b7b76",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3faae44f_1d170324",
        "filename": "plat/fvp/src/fvp_granule.c",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2023-01-10T18:06:10Z",
      "side": 1,
      "message": "Testing addr[35] will mean that RMM already knows what the banks\u0027 addresses are. Why would we need to pass DRAM layout data in Boot Manifest then?",
      "parentUuid": "aeea9284_999d9ed1",
      "revId": "9213c61d53e0290c0461f79da5b74fa5132b7b76",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c83680c_82c3b605",
        "filename": "plat/fvp/src/fvp_granule.c",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-11T12:06:37Z",
      "side": 1,
      "message": "There would be some implicit knowledge in RMM but you are right , checking bit[35] is too specific.\n\nRMM platform layer would know that for FVP a max of 2 DDR banks are possible. Then in this function it can just check if addr \u003e\u003d fvp_dram.fvp_bank[1] , then apply offset.\n\nThis is something for future, for now, your change is OK.",
      "parentUuid": "3faae44f_1d170324",
      "revId": "9213c61d53e0290c0461f79da5b74fa5132b7b76",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a69e0892_54102725",
        "filename": "plat/fvp/src/fvp_memory.c",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-06T10:17:30Z",
      "side": 1,
      "message": "Hmm , it would be useful to have checksum validation and overlap validation as part of rmm_el3_ifc component so other platforms can consume the data directly. Also it reduces the code in platform layer.\n\nSuggest to rename the function rmm_el3_ifc_get_dram_data_manifest_pa() to rmm_el3_ifc_get_dram_data_validated_pa()\n\nThis will do the checksum validation and also check for overlaps. Platforms can then directly consume the data. The function can return NULL if either the check fails or data is not present or unexpected num of banks received. And the platform can call rmm_el3_ifc_report_fail_to_el3()",
      "revId": "9213c61d53e0290c0461f79da5b74fa5132b7b76",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0792b554_d1647e19",
        "filename": "plat/fvp/src/fvp_memory.c",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2023-01-10T18:06:10Z",
      "side": 1,
      "message": "This function will have to check for (num_banks \u003c\u003d MAX_DRAM_NUM_BANKS), so MAX_DRAM_NUM_BANKS will have to be passed as a build option for each platform.\nIn case of (num_banks \u003e 2) the check for overlapping becomes more complicated, as each bank must be checked with all previous banks.\nThis function can implement \u0027checksum\u0027 check, just assuming that \u0027num_banks\u0027 value passed is correct, but the platform layer function for ovelapping check will have to read all the data from memory again which will effect performance. The current platform implementation does all the checks by reading memory data just once.",
      "parentUuid": "a69e0892_54102725",
      "revId": "9213c61d53e0290c0461f79da5b74fa5132b7b76",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54918387_82db1d33",
        "filename": "plat/fvp/src/fvp_memory.c",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-11T12:06:37Z",
      "side": 1,
      "message": "The max dram banks can be an argument to rmm_el3_ifc_get_dram_data_validated_pa(MAX_FVP_BANK) which can used to do the validation. \n\n\u003e (num_banks \u003e 2) the check for overlapping becomes more complicated,\n\nYes, agree but the check can be simplified by putting in a restriction on bank_info. It has to be sorted in ascending order by EL3 before sending it RMM. Then RMM needs to ensure prev_bank.end_addr is less next than next_bank.start_addr. Then the check becomes trivial validation of all entries in the array.\n\n\u003e This function can implement \u0027checksum\u0027 check, just assuming that \u0027num_banks\u0027 value passed is correct, but the platform layer function for ovelapping check will have to read all the data from memory again which will effect performance. The current platform implementation does all the checks by reading memory data just once.\n\nok, performance is not a huge concern for this functionality as this is a boot time func.",
      "parentUuid": "0792b554_d1647e19",
      "revId": "9213c61d53e0290c0461f79da5b74fa5132b7b76",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0eaf0a8d_e41a8824",
        "filename": "plat/fvp/src/fvp_memory.c",
        "patchSetId": 2
      },
      "lineNbr": 88,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-06T10:17:30Z",
      "side": 1,
      "message": "I suspect the flush dcache range are not needed.",
      "revId": "9213c61d53e0290c0461f79da5b74fa5132b7b76",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6041a2df_575236fa",
        "filename": "plat/fvp/src/fvp_memory.c",
        "patchSetId": 2
      },
      "lineNbr": 88,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2023-01-10T18:06:10Z",
      "side": 1,
      "message": "Let\u0027s keep it for now as we discussed.",
      "parentUuid": "0eaf0a8d_e41a8824",
      "revId": "9213c61d53e0290c0461f79da5b74fa5132b7b76",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}