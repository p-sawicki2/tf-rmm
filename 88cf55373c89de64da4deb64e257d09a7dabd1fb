{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "74cdde60_fe23550e",
        "filename": "lib/slot_buf/src/buffer.c",
        "patchSetId": 11
      },
      "lineNbr": 224,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-07-22T16:46:48Z",
      "side": 1,
      "message": "better to expose 2 variants of this function from the lib , one to map aux in REC and the other to map when EL3 sign is defined.\n\nAn internal helper can be defined to do it commonly for both within this file",
      "range": {
        "startLine": 224,
        "startChar": 6,
        "endLine": 224,
        "endChar": 29
      },
      "revId": "88cf55373c89de64da4deb64e257d09a7dabd1fb",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6df2fc6_61663c1e",
        "filename": "lib/slot_buf/src/buffer.c",
        "patchSetId": 11
      },
      "lineNbr": 224,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2024-07-22T17:39:12Z",
      "side": 1,
      "message": "thats how i had done it, but a suggestion previously asked to make it common. i think this can work either way. there is no major benefit to doing either way. would like to avoid this change unless you insist.",
      "parentUuid": "74cdde60_fe23550e",
      "range": {
        "startLine": 224,
        "startChar": 6,
        "endLine": 224,
        "endChar": 29
      },
      "revId": "88cf55373c89de64da4deb64e257d09a7dabd1fb",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28057d71_33d4badc",
        "filename": "lib/slot_buf/src/buffer.c",
        "patchSetId": 11
      },
      "lineNbr": 224,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-07-23T14:04:43Z",
      "side": 1,
      "message": "one theory I have is, when RMM is built in the regular build (without HES sign feature), my suggestion would potentially allow compiler to inline the implementation which has a fixed offset to map the aux granules.\n\nIt also avoids invalid possibilities of `slot` and is a better design from an API PoV.",
      "parentUuid": "f6df2fc6_61663c1e",
      "range": {
        "startLine": 224,
        "startChar": 6,
        "endLine": 224,
        "endChar": 29
      },
      "revId": "88cf55373c89de64da4deb64e257d09a7dabd1fb",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0937c90a_df09ce27",
        "filename": "lib/slot_buf/src/buffer.c",
        "patchSetId": 11
      },
      "lineNbr": 224,
      "author": {
        "id": 1000010
      },
      "writtenOn": "2024-07-29T09:13:25Z",
      "side": 1,
      "message": "Raghu\u0027s original code was just like your suggestion Soby, I asked him this change to reduce code duplication. I didn\u0027t consider the possible performance gain through inlining. https://review.trustedfirmware.org/c/TF-RMM/tf-rmm/+/29291/3/runtime/core/hes_queue.c#104\n\nHaving an internal (static) helper seems to be a good idea with regards to invalid possibilities of `slot`. It seems that inlining still works in that case if the function is called from the same compilation unit: https://godbolt.org/z/WqoE8T14c\n\nHowever the function definition is in a library, and we are calling them from runtime, I\u0027m not sure inlining will work across compilation units, as we are not using Link time optimization as far as I know.",
      "parentUuid": "28057d71_33d4badc",
      "range": {
        "startLine": 224,
        "startChar": 6,
        "endLine": 224,
        "endChar": 29
      },
      "revId": "88cf55373c89de64da4deb64e257d09a7dabd1fb",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e5dba45_ded113fb",
        "filename": "lib/slot_buf/src/buffer.c",
        "patchSetId": 11
      },
      "lineNbr": 224,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-08-02T10:46:10Z",
      "side": 1,
      "message": "Thanks Mate for trying this compilation output. The compiler `O3` has an influence on this behaviour.\n\nSo if we have 2 public API, buffer_rec_aux_granules_map() and buffer_el3_sign_aux_granules_map() , then having a common static function inside the file , will allow the compiler to inline the implementation to the public API.\n\nThis is the result I was hoping for. The other good result is , we avoid a code gadget which can map any slot, as, by inlining  the code has a fixed offset to be used for the slot.",
      "parentUuid": "0937c90a_df09ce27",
      "range": {
        "startLine": 224,
        "startChar": 6,
        "endLine": 224,
        "endChar": 29
      },
      "revId": "88cf55373c89de64da4deb64e257d09a7dabd1fb",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0cd787df_33ee6008",
        "filename": "runtime/core/hes_queue.c",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-07-22T16:46:48Z",
      "side": 1,
      "message": "As part of rename to generic name , perhaps \"el3_token_sign_queue.c\", the file, functions, structures would need rename.",
      "revId": "88cf55373c89de64da4deb64e257d09a7dabd1fb",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0cd7b9fa_777bd3df",
        "filename": "runtime/core/hes_queue.c",
        "patchSetId": 11
      },
      "lineNbr": 86,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-07-22T16:46:48Z",
      "side": 1,
      "message": "Need a comment on the expected wrap around behaviour.",
      "revId": "88cf55373c89de64da4deb64e257d09a7dabd1fb",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32805d5f_5df778e5",
        "filename": "runtime/core/hes_queue.c",
        "patchSetId": 11
      },
      "lineNbr": 106,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-07-22T16:46:48Z",
      "side": 1,
      "message": "although currently we have arbitrary panics in RMM, the policy we are shifting towards is to return the error code back to caller. \n\nThe spec doesn\u0027t allow to return an unk error code, but we are discussing to change that. Hence the error will be propagated to Realm and perhaps Realm will exit but keeping RMM still alive.",
      "range": {
        "startLine": 106,
        "startChar": 2,
        "endLine": 106,
        "endChar": 10
      },
      "revId": "88cf55373c89de64da4deb64e257d09a7dabd1fb",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fbd7d6b_90fe7022",
        "filename": "runtime/core/hes_queue.c",
        "patchSetId": 11
      },
      "lineNbr": 106,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2024-07-22T17:39:12Z",
      "side": 1,
      "message": "sure, can cross the bridge when we the spec gets there. however, for this, since we pushed queining to EL3, the errors are platform specific, and there is no way to handle those. FOr this interface, as i mentioned, there really shouldnt be any error case, since this is a queue with just push and pop operations. anything else is really covering bases here.",
      "parentUuid": "32805d5f_5df778e5",
      "range": {
        "startLine": 106,
        "startChar": 2,
        "endLine": 106,
        "endChar": 10
      },
      "revId": "88cf55373c89de64da4deb64e257d09a7dabd1fb",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c5168a46_be274f4f",
        "filename": "runtime/core/hes_queue.c",
        "patchSetId": 11
      },
      "lineNbr": 106,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-08-02T10:46:10Z",
      "side": 1,
      "message": "I agree from now this is fine. Generally we are moving towards an approach wherein if there is some failure for this request in HES/EL3, we dont need to panic the entire RMM, but rather return the error back to Realm, thus keeping the rest of realm world functional. \n\nThis is not the case today so this is fine. WE may refactor this in future.",
      "parentUuid": "7fbd7d6b_90fe7022",
      "range": {
        "startLine": 106,
        "startChar": 2,
        "endLine": 106,
        "endChar": 10
      },
      "revId": "88cf55373c89de64da4deb64e257d09a7dabd1fb",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a178e4a_f6658bda",
        "filename": "runtime/core/hes_queue.c",
        "patchSetId": 11
      },
      "lineNbr": 116,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-07-22T16:46:48Z",
      "side": 1,
      "message": "I gave a previous comment on this, but this function can move to buffer module.\n\nthe name can be `buffer_aux_granules_map_el3_sign_slot` ?",
      "revId": "88cf55373c89de64da4deb64e257d09a7dabd1fb",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3cb54a75_a2490261",
        "filename": "runtime/core/init.c",
        "patchSetId": 11
      },
      "lineNbr": 113,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-07-22T16:46:48Z",
      "side": 1,
      "message": "can be done within attestation_init().",
      "range": {
        "startLine": 113,
        "startChar": 5,
        "endLine": 113,
        "endChar": 26
      },
      "revId": "88cf55373c89de64da4deb64e257d09a7dabd1fb",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06b33955_4cf3ce98",
        "filename": "runtime/core/init.c",
        "patchSetId": 11
      },
      "lineNbr": 113,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2024-07-22T17:39:12Z",
      "side": 1,
      "message": "this choice really stems from the current rmm library design. things related to REC are in runtime, and libraries like attestation cannot depend on it. if we move pushing and init to attestation library, the pulling will still need to be in a run time file and that makes the implementation asymmetric in that push and init are in a library but pull is in runtime..I dont think that is very clean.",
      "parentUuid": "3cb54a75_a2490261",
      "range": {
        "startLine": 113,
        "startChar": 5,
        "endLine": 113,
        "endChar": 26
      },
      "revId": "88cf55373c89de64da4deb64e257d09a7dabd1fb",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f694bbbf_cb8a2275",
        "filename": "runtime/core/init.c",
        "patchSetId": 11
      },
      "lineNbr": 113,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-08-02T10:46:10Z",
      "side": 1,
      "message": "indeed it is better to keep callers of the Hes Queue symmetric.  currently the call to push is within the t_cose lib. If we could move init and pull (if possible) to attestation, then there is a big win that rest of RMM code could remain the same for all platforms. \n\nWe have some plans to make Attestation component an EL0 app which means this difference in attestation, if isolated to that component, by changing the app, we get a different mode of attestation with rest of RMM code remaining the same.  This is huge win in terms of keeping core RMM code the same.\n\nCurrently this is an ideal and if not possible today, perhaps later in future.",
      "parentUuid": "06b33955_4cf3ce98",
      "range": {
        "startLine": 113,
        "startChar": 5,
        "endLine": 113,
        "endChar": 26
      },
      "revId": "88cf55373c89de64da4deb64e257d09a7dabd1fb",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84dadea3_fbad7e59",
        "filename": "runtime/rmi/rec.c",
        "patchSetId": 11
      },
      "lineNbr": 191,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-07-22T16:46:48Z",
      "side": 1,
      "message": "hopefully this may not be needed after refactor to attestation,",
      "revId": "88cf55373c89de64da4deb64e257d09a7dabd1fb",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}