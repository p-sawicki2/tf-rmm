{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "74cdde60_fe23550e",
        "filename": "lib/slot_buf/src/buffer.c",
        "patchSetId": 11
      },
      "lineNbr": 224,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-07-22T16:46:48Z",
      "side": 1,
      "message": "better to expose 2 variants of this function from the lib , one to map aux in REC and the other to map when EL3 sign is defined.\n\nAn internal helper can be defined to do it commonly for both within this file",
      "range": {
        "startLine": 224,
        "startChar": 6,
        "endLine": 224,
        "endChar": 29
      },
      "revId": "88cf55373c89de64da4deb64e257d09a7dabd1fb",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6df2fc6_61663c1e",
        "filename": "lib/slot_buf/src/buffer.c",
        "patchSetId": 11
      },
      "lineNbr": 224,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2024-07-22T17:39:12Z",
      "side": 1,
      "message": "thats how i had done it, but a suggestion previously asked to make it common. i think this can work either way. there is no major benefit to doing either way. would like to avoid this change unless you insist.",
      "parentUuid": "74cdde60_fe23550e",
      "range": {
        "startLine": 224,
        "startChar": 6,
        "endLine": 224,
        "endChar": 29
      },
      "revId": "88cf55373c89de64da4deb64e257d09a7dabd1fb",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28057d71_33d4badc",
        "filename": "lib/slot_buf/src/buffer.c",
        "patchSetId": 11
      },
      "lineNbr": 224,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-07-23T14:04:43Z",
      "side": 1,
      "message": "one theory I have is, when RMM is built in the regular build (without HES sign feature), my suggestion would potentially allow compiler to inline the implementation which has a fixed offset to map the aux granules.\n\nIt also avoids invalid possibilities of `slot` and is a better design from an API PoV.",
      "parentUuid": "f6df2fc6_61663c1e",
      "range": {
        "startLine": 224,
        "startChar": 6,
        "endLine": 224,
        "endChar": 29
      },
      "revId": "88cf55373c89de64da4deb64e257d09a7dabd1fb",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0cd787df_33ee6008",
        "filename": "runtime/core/hes_queue.c",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-07-22T16:46:48Z",
      "side": 1,
      "message": "As part of rename to generic name , perhaps \"el3_token_sign_queue.c\", the file, functions, structures would need rename.",
      "revId": "88cf55373c89de64da4deb64e257d09a7dabd1fb",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0cd7b9fa_777bd3df",
        "filename": "runtime/core/hes_queue.c",
        "patchSetId": 11
      },
      "lineNbr": 86,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-07-22T16:46:48Z",
      "side": 1,
      "message": "Need a comment on the expected wrap around behaviour.",
      "revId": "88cf55373c89de64da4deb64e257d09a7dabd1fb",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32805d5f_5df778e5",
        "filename": "runtime/core/hes_queue.c",
        "patchSetId": 11
      },
      "lineNbr": 106,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-07-22T16:46:48Z",
      "side": 1,
      "message": "although currently we have arbitrary panics in RMM, the policy we are shifting towards is to return the error code back to caller. \n\nThe spec doesn\u0027t allow to return an unk error code, but we are discussing to change that. Hence the error will be propagated to Realm and perhaps Realm will exit but keeping RMM still alive.",
      "range": {
        "startLine": 106,
        "startChar": 2,
        "endLine": 106,
        "endChar": 10
      },
      "revId": "88cf55373c89de64da4deb64e257d09a7dabd1fb",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fbd7d6b_90fe7022",
        "filename": "runtime/core/hes_queue.c",
        "patchSetId": 11
      },
      "lineNbr": 106,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2024-07-22T17:39:12Z",
      "side": 1,
      "message": "sure, can cross the bridge when we the spec gets there. however, for this, since we pushed queining to EL3, the errors are platform specific, and there is no way to handle those. FOr this interface, as i mentioned, there really shouldnt be any error case, since this is a queue with just push and pop operations. anything else is really covering bases here.",
      "parentUuid": "32805d5f_5df778e5",
      "range": {
        "startLine": 106,
        "startChar": 2,
        "endLine": 106,
        "endChar": 10
      },
      "revId": "88cf55373c89de64da4deb64e257d09a7dabd1fb",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a178e4a_f6658bda",
        "filename": "runtime/core/hes_queue.c",
        "patchSetId": 11
      },
      "lineNbr": 116,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-07-22T16:46:48Z",
      "side": 1,
      "message": "I gave a previous comment on this, but this function can move to buffer module.\n\nthe name can be `buffer_aux_granules_map_el3_sign_slot` ?",
      "revId": "88cf55373c89de64da4deb64e257d09a7dabd1fb",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3cb54a75_a2490261",
        "filename": "runtime/core/init.c",
        "patchSetId": 11
      },
      "lineNbr": 113,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-07-22T16:46:48Z",
      "side": 1,
      "message": "can be done within attestation_init().",
      "range": {
        "startLine": 113,
        "startChar": 5,
        "endLine": 113,
        "endChar": 26
      },
      "revId": "88cf55373c89de64da4deb64e257d09a7dabd1fb",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06b33955_4cf3ce98",
        "filename": "runtime/core/init.c",
        "patchSetId": 11
      },
      "lineNbr": 113,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2024-07-22T17:39:12Z",
      "side": 1,
      "message": "this choice really stems from the current rmm library design. things related to REC are in runtime, and libraries like attestation cannot depend on it. if we move pushing and init to attestation library, the pulling will still need to be in a run time file and that makes the implementation asymmetric in that push and init are in a library but pull is in runtime..I dont think that is very clean.",
      "parentUuid": "3cb54a75_a2490261",
      "range": {
        "startLine": 113,
        "startChar": 5,
        "endLine": 113,
        "endChar": 26
      },
      "revId": "88cf55373c89de64da4deb64e257d09a7dabd1fb",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84dadea3_fbad7e59",
        "filename": "runtime/rmi/rec.c",
        "patchSetId": 11
      },
      "lineNbr": 191,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-07-22T16:46:48Z",
      "side": 1,
      "message": "hopefully this may not be needed after refactor to attestation,",
      "revId": "88cf55373c89de64da4deb64e257d09a7dabd1fb",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}