{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f90567a6_375d4633",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 13
      },
      "lineNbr": 19,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-06-10T13:30:04Z",
      "side": 1,
      "message": "Need an cassert that REFCOUNT_MAX cannot be higher than RECOUNT_WIDTH bits.",
      "revId": "a1b84da630331e3ecb0aadb735642796bb17e5d8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "19faef22_a9ac5289",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 13
      },
      "lineNbr": 19,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-06-10T14:52:00Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "f90567a6_375d4633",
      "revId": "a1b84da630331e3ecb0aadb735642796bb17e5d8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e23a361_62ea8d07",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 13
      },
      "lineNbr": 25,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-06-10T13:30:04Z",
      "side": 1,
      "message": "this can be implemented as sca_read16(). \n\nAnother way to look at this is that these are private macros and used only within this file. All the rest of code should use the accessors defined here. \n\nSo granule_refcount_read_realxed() should assert that lock is acquired.",
      "range": {
        "startLine": 25,
        "startChar": 2,
        "endLine": 25,
        "endChar": 20
      },
      "revId": "a1b84da630331e3ecb0aadb735642796bb17e5d8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c4d4b39_4647697f",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 13
      },
      "lineNbr": 25,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-06-10T14:52:00Z",
      "side": 1,
      "message": "__sca_read16() uses \"ldrh\" instruction \u0026 compiler generates the same one for\ng-\u003edescriptor.\nrefcount can be modified without lock acquired.\nI can add refcount access functions.",
      "parentUuid": "4e23a361_62ea8d07",
      "range": {
        "startLine": 25,
        "startChar": 2,
        "endLine": 25,
        "endChar": 20
      },
      "revId": "a1b84da630331e3ecb0aadb735642796bb17e5d8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc2cbea9_0f936511",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 13
      },
      "lineNbr": 25,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-06-10T16:29:17Z",
      "side": 1,
      "message": "Yup, hence the suggestion to remove the variant and only retain the read_relaxed version.",
      "parentUuid": "6c4d4b39_4647697f",
      "range": {
        "startLine": 25,
        "startChar": 2,
        "endLine": 25,
        "endChar": 20
      },
      "revId": "a1b84da630331e3ecb0aadb735642796bb17e5d8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55818934_82684fdd",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 13
      },
      "lineNbr": 25,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-06-10T16:29:46Z",
      "side": 1,
      "message": "granule_set_refcount() \u0026 granule_refcount_read_relaxed() are called in granule.cpp unit tests without granule lock acquired.",
      "parentUuid": "6c4d4b39_4647697f",
      "range": {
        "startLine": 25,
        "startChar": 2,
        "endLine": 25,
        "endChar": 20
      },
      "revId": "a1b84da630331e3ecb0aadb735642796bb17e5d8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "abe34149_3f0db050",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 13
      },
      "lineNbr": 25,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-06-11T13:44:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "55818934_82684fdd",
      "range": {
        "startLine": 25,
        "startChar": 2,
        "endLine": 25,
        "endChar": 20
      },
      "revId": "a1b84da630331e3ecb0aadb735642796bb17e5d8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed779248_98eaa648",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 13
      },
      "lineNbr": 30,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-06-10T13:30:04Z",
      "side": 1,
      "message": "See comment above.",
      "range": {
        "startLine": 30,
        "startChar": 29,
        "endLine": 30,
        "endChar": 58
      },
      "revId": "a1b84da630331e3ecb0aadb735642796bb17e5d8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f0e1a88_56a7f0e9",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 13
      },
      "lineNbr": 37,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-06-10T13:30:04Z",
      "side": 1,
      "message": "This function is always called with lock acquired. Can you add an assert here and ensure the same ?",
      "revId": "a1b84da630331e3ecb0aadb735642796bb17e5d8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bee774c5_09162715",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 13
      },
      "lineNbr": 37,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-06-10T14:52:00Z",
      "side": 1,
      "message": "complete_psci_cpu_on() \u0026 granule_refcount_read_acquire() are called without granule lock acquired.",
      "parentUuid": "5f0e1a88_56a7f0e9",
      "revId": "a1b84da630331e3ecb0aadb735642796bb17e5d8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8a8b9b7_a8725857",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 13
      },
      "lineNbr": 37,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-06-10T16:29:17Z",
      "side": 1,
      "message": "\u003e complete_psci_cpu_on() \u0026 granule_refcount_read_acquire() \n\nBoth should have locks acquired by caller.",
      "parentUuid": "bee774c5_09162715",
      "revId": "a1b84da630331e3ecb0aadb735642796bb17e5d8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "71a538f0_ecbe9c0d",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 13
      },
      "lineNbr": 37,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-06-11T13:44:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a8a8b9b7_a8725857",
      "revId": "a1b84da630331e3ecb0aadb735642796bb17e5d8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "213a8f03_0a734596",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 13
      },
      "lineNbr": 58,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-06-10T13:30:04Z",
      "side": 1,
      "message": "replace with REFCOUNT() as per comments above.",
      "range": {
        "startLine": 58,
        "startChar": 14,
        "endLine": 58,
        "endChar": 15
      },
      "revId": "a1b84da630331e3ecb0aadb735642796bb17e5d8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "00af17d1_9024cece",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 13
      },
      "lineNbr": 58,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-06-10T16:29:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "213a8f03_0a734596",
      "range": {
        "startLine": 58,
        "startChar": 14,
        "endLine": 58,
        "endChar": 15
      },
      "revId": "a1b84da630331e3ecb0aadb735642796bb17e5d8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c4c6f7d_2eefa94e",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 13
      },
      "lineNbr": 71,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-06-10T13:30:04Z",
      "side": 1,
      "message": "see above.",
      "range": {
        "startLine": 71,
        "startChar": 9,
        "endLine": 71,
        "endChar": 38
      },
      "revId": "a1b84da630331e3ecb0aadb735642796bb17e5d8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e32dd6b5_87dce3fe",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 13
      },
      "lineNbr": 71,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-06-10T16:29:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4c4c6f7d_2eefa94e",
      "range": {
        "startLine": 71,
        "startChar": 9,
        "endLine": 71,
        "endChar": 38
      },
      "revId": "a1b84da630331e3ecb0aadb735642796bb17e5d8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70d29dff_c73ded41",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 13
      },
      "lineNbr": 109,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-06-10T16:14:39Z",
      "side": 1,
      "message": "add comment: Atomically EOR the val while keeping the bits for refcount and bitlock as 0 which would preserve their values in memory.",
      "revId": "a1b84da630331e3ecb0aadb735642796bb17e5d8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0fda9000_4f8797c1",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 13
      },
      "lineNbr": 109,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-06-11T13:44:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "70d29dff_c73ded41",
      "revId": "a1b84da630331e3ecb0aadb735642796bb17e5d8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0436d29a_0d203717",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 13
      },
      "lineNbr": 110,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-06-10T13:30:04Z",
      "side": 1,
      "message": "I still dont understand how the atomic EOR will solve the issue of refcount changing between Line 107 and 110.",
      "revId": "a1b84da630331e3ecb0aadb735642796bb17e5d8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d13eab08_c19f30c3",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 13
      },
      "lineNbr": 110,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-06-10T14:07:53Z",
      "side": 1,
      "message": "Thanks for the offline explanation Alexei, yes, this could work",
      "parentUuid": "0436d29a_0d203717",
      "revId": "a1b84da630331e3ecb0aadb735642796bb17e5d8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf276e63_ac1023d6",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 13
      },
      "lineNbr": 177,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-06-10T16:14:39Z",
      "side": 1,
      "message": "I know this will work since refcount is the LSB. Would be good to add a comment. Similarly to below lines.",
      "revId": "a1b84da630331e3ecb0aadb735642796bb17e5d8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da3b9cde_fb6cc59f",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 13
      },
      "lineNbr": 177,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-06-11T08:57:43Z",
      "side": 1,
      "message": "can make this atomic increment. Similar comment for below as well.",
      "parentUuid": "cf276e63_ac1023d6",
      "revId": "a1b84da630331e3ecb0aadb735642796bb17e5d8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1717336_7938b373",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 13
      },
      "lineNbr": 205,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-06-10T16:14:39Z",
      "side": 1,
      "message": "add asset that the lock is locked.",
      "revId": "a1b84da630331e3ecb0aadb735642796bb17e5d8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b417ba0_4df4d30f",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 13
      },
      "lineNbr": 213,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-06-10T16:14:39Z",
      "side": 1,
      "message": "add assert that lock is locked.\n\nActually there is a slight over optimization in the current code : https://github.com/TF-RMM/tf-rmm/blob/90f176f25634b7e38cc77bb7faf5b2e2e5837988/runtime/rmi/rec.c#L428\n\nThe put should be a put_release over there.",
      "revId": "a1b84da630331e3ecb0aadb735642796bb17e5d8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f4cb595_bab2a8dd",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 13
      },
      "lineNbr": 213,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-06-11T13:44:57Z",
      "side": 1,
      "message": "The comment for smc_rec_destroy() calling atomic_granule_put() reads:\n\"Also, since the granule is only used for\n\t * refcount update, only an atomic operation will suffice and\n\t * release/acquire semantics are not required.\"\n\nShould the comment be amended \u0026 atomic_granule_put_release() used?\n\nAdding assert that granule is locked causes assert in smc_rec_destroy() \u0026 it is the only 1 function which calls atomic_granule_put(). This function can be removed if we switch to atomic_granule_put_release().",
      "parentUuid": "4b417ba0_4df4d30f",
      "revId": "a1b84da630331e3ecb0aadb735642796bb17e5d8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bab74d60_c809f0e4",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 13
      },
      "lineNbr": 213,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-06-11T14:26:00Z",
      "side": 1,
      "message": "keep atomic_granule_put(), since this is a generic library. The comment should be ammended and smc_rec_destroy() can call atomic_granule_put_release().",
      "parentUuid": "1f4cb595_bab2a8dd",
      "revId": "a1b84da630331e3ecb0aadb735642796bb17e5d8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0c6108b_40099ec1",
        "filename": "lib/granule/src/granule.c",
        "patchSetId": 13
      },
      "lineNbr": 113,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-06-10T16:14:39Z",
      "side": 1,
      "message": "why is expected state int now instead of char ?",
      "range": {
        "startLine": 113,
        "startChar": 15,
        "endLine": 113,
        "endChar": 19
      },
      "revId": "a1b84da630331e3ecb0aadb735642796bb17e5d8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5be7d0b5_886118df",
        "filename": "lib/granule/src/granule.c",
        "patchSetId": 13
      },
      "lineNbr": 113,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-06-10T16:29:46Z",
      "side": 1,
      "message": "I reverted API to the original which used 16 bytes granules. Will change back to uint8_t to fix cppcheck MISRA defects.",
      "parentUuid": "a0c6108b_40099ec1",
      "range": {
        "startLine": 113,
        "startChar": 15,
        "endLine": 113,
        "endChar": 19
      },
      "revId": "a1b84da630331e3ecb0aadb735642796bb17e5d8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ba79b02_26d96aa5",
        "filename": "runtime/rmi/realm.c",
        "patchSetId": 13
      },
      "lineNbr": 59,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-06-10T16:14:39Z",
      "side": 1,
      "message": "granule_get_state() should be used outside granule component.",
      "range": {
        "startLine": 59,
        "startChar": 34,
        "endLine": 59,
        "endChar": 39
      },
      "revId": "a1b84da630331e3ecb0aadb735642796bb17e5d8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "04a275f1_edd7ba08",
        "filename": "runtime/rmi/realm.c",
        "patchSetId": 13
      },
      "lineNbr": 59,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-06-11T13:44:57Z",
      "side": 1,
      "message": "granule_get_state() asserts if granule is not locked.\nAdded new granule_state() which only asserts for (g !\u003d NULL) which will be called for non-locked granules.",
      "parentUuid": "7ba79b02_26d96aa5",
      "range": {
        "startLine": 59,
        "startChar": 34,
        "endLine": 59,
        "endChar": 39
      },
      "revId": "a1b84da630331e3ecb0aadb735642796bb17e5d8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6cc12872_5411aac2",
        "filename": "runtime/rmi/realm.c",
        "patchSetId": 13
      },
      "lineNbr": 489,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-06-10T16:14:39Z",
      "side": 1,
      "message": "get_refcount_relaxed should be used outside granule component.",
      "range": {
        "startLine": 489,
        "startChar": 29,
        "endLine": 489,
        "endChar": 37
      },
      "revId": "a1b84da630331e3ecb0aadb735642796bb17e5d8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7fbdf106_dbb66c52",
        "filename": "runtime/rmi/realm.c",
        "patchSetId": 13
      },
      "lineNbr": 489,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-06-11T13:44:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6cc12872_5411aac2",
      "range": {
        "startLine": 489,
        "startChar": 29,
        "endLine": 489,
        "endChar": 37
      },
      "revId": "a1b84da630331e3ecb0aadb735642796bb17e5d8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4f58b16_b126ac4c",
        "filename": "runtime/rmi/rtt.c",
        "patchSetId": 13
      },
      "lineNbr": 345,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-06-10T16:14:39Z",
      "side": 1,
      "message": "similar comments as previous.",
      "revId": "a1b84da630331e3ecb0aadb735642796bb17e5d8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5e58992_8917aa73",
        "filename": "runtime/rmi/rtt.c",
        "patchSetId": 13
      },
      "lineNbr": 996,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-06-10T16:14:39Z",
      "side": 1,
      "message": "similar comments as previous.",
      "range": {
        "startLine": 996,
        "startChar": 25,
        "endLine": 996,
        "endChar": 30
      },
      "revId": "a1b84da630331e3ecb0aadb735642796bb17e5d8",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}