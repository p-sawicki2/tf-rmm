{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d6a9596f_87d8f206",
        "filename": "lib/realm/tests/buffer.cpp",
        "patchSetId": 21
      },
      "lineNbr": 353,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-16T11:45:15Z",
      "side": 1,
      "message": "we are only comparing clean blocks and not verifying the written data in the current test it seems. Also test can be simplified as follows as per the test purpose.\n\nSimplify logic as below:\n0. start loop and memset both granule_add[0] and [1] to zero.\n1. Copy random data to one of 4 blocks in granule_addrs[1].\n2. Copy the same block to granule_add[0] (same offset/same size) using ns_buffer_write().\n3. Compare the 2 buffer using memcmp (full size) and this should match.\n\n\nCan iterate the same loop over all CPUs.\n\nThe ns_buffer_read_TC1 is a similar to my suggestion. You can use that logic as well here instead of my suggestion.  keeping similar logic for different API is good for maintainability.",
      "range": {
        "startLine": 353,
        "startChar": 3,
        "endLine": 353,
        "endChar": 15
      },
      "revId": "44fc802f88a750b118f047cd8ef9c52a75277dac",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4dc920ea_f4e3fcf9",
        "filename": "lib/realm/tests/buffer.cpp",
        "patchSetId": 21
      },
      "lineNbr": 353,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-01-16T17:24:14Z",
      "side": 1,
      "message": "This patch tests both, the written data and the unwritten data:\n\ntest_block \u003d granule_addrs[1]; /* First block of granule_addrs[1] contains the data that was copied */\nif (j !\u003d block) {\n    test_block +\u003d GRANULE_BLOCK_SIZE; /* Second bock of granule_addrs[1] is all zeroes, so test_block points now to a zeroed block */\n}\n\non MEMCMP_EQUAL we compare test_block against (granule_addrs[0] + (GRANULE_BLOCK_SIZE * j)) where j is the block iterator.\n\nI will take a look at your suggestion and try to implement it to see which one is simpler",
      "parentUuid": "d6a9596f_87d8f206",
      "range": {
        "startLine": 353,
        "startChar": 3,
        "endLine": 353,
        "endChar": 15
      },
      "revId": "44fc802f88a750b118f047cd8ef9c52a75277dac",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d908b55a_c2d2ae1d",
        "filename": "lib/realm/tests/buffer.cpp",
        "patchSetId": 21
      },
      "lineNbr": 353,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-01-17T13:35:59Z",
      "side": 1,
      "message": "I reimplemented this test in the following way:\n\n1- Start with a granule full of random data and the test granule zeroed.\n2- For each block within a granule:\n   2.1- Copy that block to the test granule using ns_buffer_write() with the right offset\n   2.2- Test that the content of the test granule from start up to the end of the current block matches with the source\n   2.3- Test that the content of the test granule from the beginning of the next block till the end of the granule is still zero\n\nSimilar approach is used for ns_buffer_read()",
      "parentUuid": "4dc920ea_f4e3fcf9",
      "range": {
        "startLine": 353,
        "startChar": 3,
        "endLine": 353,
        "endChar": 15
      },
      "revId": "44fc802f88a750b118f047cd8ef9c52a75277dac",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af9cab49_be496561",
        "filename": "lib/realm/tests/buffer.cpp",
        "patchSetId": 21
      },
      "lineNbr": 416,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-16T11:45:15Z",
      "side": 1,
      "message": "\"check\"",
      "range": {
        "startLine": 416,
        "startChar": 20,
        "endLine": 416,
        "endChar": 29
      },
      "revId": "44fc802f88a750b118f047cd8ef9c52a75277dac",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "31e1905e_98fcf645",
        "filename": "lib/realm/tests/buffer.cpp",
        "patchSetId": 21
      },
      "lineNbr": 416,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-01-17T13:35:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "af9cab49_be496561",
      "range": {
        "startLine": 416,
        "startChar": 20,
        "endLine": 416,
        "endChar": 29
      },
      "revId": "44fc802f88a750b118f047cd8ef9c52a75277dac",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e9fceaf_a3bb01f6",
        "filename": "lib/realm/tests/test_harness.c",
        "patchSetId": 21
      },
      "lineNbr": 11,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-16T11:45:15Z",
      "side": 1,
      "message": "It is better to stay away from VA/PA when host is involved.\n\n\"  .. which can be accessed for read or write by the tests. The callback maps the `addr` as per aarch64 VMSA and walk of the xlat tables to retrieve the original `addr` thus verifying that the `addr` was mapped correctly in the tables.\"",
      "range": {
        "startLine": 9,
        "startChar": 64,
        "endLine": 11,
        "endChar": 43
      },
      "revId": "44fc802f88a750b118f047cd8ef9c52a75277dac",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ac8f337_ff7e9f22",
        "filename": "lib/realm/tests/test_harness.c",
        "patchSetId": 21
      },
      "lineNbr": 11,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-01-17T13:35:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1e9fceaf_a3bb01f6",
      "range": {
        "startLine": 9,
        "startChar": 64,
        "endLine": 11,
        "endChar": 43
      },
      "revId": "44fc802f88a750b118f047cd8ef9c52a75277dac",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7cb12cfc_2c00d94b",
        "filename": "lib/realm/tests/test_harness.c",
        "patchSetId": 21
      },
      "lineNbr": 17,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-16T11:45:15Z",
      "side": 1,
      "message": "remove.",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 17,
        "endChar": 20
      },
      "revId": "44fc802f88a750b118f047cd8ef9c52a75277dac",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "39a05480_9cacb5df",
        "filename": "lib/realm/tests/test_harness.c",
        "patchSetId": 21
      },
      "lineNbr": 17,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-01-17T13:35:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7cb12cfc_2c00d94b",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 17,
        "endChar": 20
      },
      "revId": "44fc802f88a750b118f047cd8ef9c52a75277dac",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff453bd4_c1ecc0ee",
        "filename": "lib/realm/tests/test_harness.c",
        "patchSetId": 21
      },
      "lineNbr": 19,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-16T11:45:15Z",
      "side": 1,
      "message": "I think the prefix can be `_access`",
      "range": {
        "startLine": 19,
        "startChar": 21,
        "endLine": 19,
        "endChar": 29
      },
      "revId": "44fc802f88a750b118f047cd8ef9c52a75277dac",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e35e0c5_f7e63a00",
        "filename": "lib/realm/tests/test_harness.c",
        "patchSetId": 21
      },
      "lineNbr": 19,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-01-17T13:35:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ff453bd4_c1ecc0ee",
      "range": {
        "startLine": 19,
        "startChar": 21,
        "endLine": 19,
        "endChar": 29
      },
      "revId": "44fc802f88a750b118f047cd8ef9c52a75277dac",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86dccf1a_b7cc9d21",
        "filename": "lib/realm/tests/test_harness.c",
        "patchSetId": 21
      },
      "lineNbr": 34,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-16T11:45:15Z",
      "side": 1,
      "message": "\" Perform a table walk to get the PA mapped to \u0027slot\u0027. If everything went\n   well, it should return the same address as \u0027addr\u0027.\"\n\n\nYou could add a check here\n\nCHECK(addr \u003d\u003d realm_test_util_slot_to_pa(slot))",
      "range": {
        "startLine": 27,
        "startChar": 1,
        "endLine": 34,
        "endChar": 4
      },
      "revId": "44fc802f88a750b118f047cd8ef9c52a75277dac",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a9083f5e_1e3fe6f7",
        "filename": "lib/realm/tests/test_harness.c",
        "patchSetId": 21
      },
      "lineNbr": 34,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-01-17T13:35:59Z",
      "side": 1,
      "message": "We cannot do checks here as this is C code and the checks are C++ code. Also, I think it is more intuitive to do the explicit check on the test itself, so it is not hidden anywhere. I don\u0027t think the test harnesses should perform checks.\n\nDone on the comment",
      "parentUuid": "86dccf1a_b7cc9d21",
      "range": {
        "startLine": 27,
        "startChar": 1,
        "endLine": 34,
        "endChar": 4
      },
      "revId": "44fc802f88a750b118f047cd8ef9c52a75277dac",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3e02678_eb289045",
        "filename": "lib/realm/tests/test_harness.c",
        "patchSetId": 21
      },
      "lineNbr": 40,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-16T11:45:15Z",
      "side": 1,
      "message": "\"Unmap a buffer addr which was previously mapped using test_buffer_map_access(). The addr needs to correspond to VA as per aarch64 VMSA, hence use the test helper to retrieve the same.\"",
      "range": {
        "startLine": 39,
        "startChar": 3,
        "endLine": 40,
        "endChar": 55
      },
      "revId": "44fc802f88a750b118f047cd8ef9c52a75277dac",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ac50e4c4_92140e38",
        "filename": "lib/realm/tests/test_harness.c",
        "patchSetId": 21
      },
      "lineNbr": 40,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-01-17T13:35:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c3e02678_eb289045",
      "range": {
        "startLine": 39,
        "startChar": 3,
        "endLine": 40,
        "endChar": 55
      },
      "revId": "44fc802f88a750b118f047cd8ef9c52a75277dac",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5e76fdc_065377e8",
        "filename": "lib/realm/tests/test_harness.c",
        "patchSetId": 21
      },
      "lineNbr": 42,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-16T11:45:15Z",
      "side": 1,
      "message": "_access",
      "range": {
        "startLine": 42,
        "startChar": 22,
        "endLine": 42,
        "endChar": 30
      },
      "revId": "44fc802f88a750b118f047cd8ef9c52a75277dac",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d753f132_fe95c416",
        "filename": "lib/realm/tests/test_harness.c",
        "patchSetId": 21
      },
      "lineNbr": 42,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-01-17T13:35:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c5e76fdc_065377e8",
      "range": {
        "startLine": 42,
        "startChar": 22,
        "endLine": 42,
        "endChar": 30
      },
      "revId": "44fc802f88a750b118f047cd8ef9c52a75277dac",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}