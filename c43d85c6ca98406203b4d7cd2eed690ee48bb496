{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3f6373dc_306354c7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 16
      },
      "lineNbr": 0,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2024-01-04T10:31:04Z",
      "side": 1,
      "message": "Manual CI+2 job: https://jenkins.openci.aws.arm.com/job/rmm-gerrit-tforg-l2/473/",
      "revId": "c43d85c6ca98406203b4d7cd2eed690ee48bb496",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8019a95b_df836224",
        "filename": "lib/s2tt/src/s2tt.c",
        "patchSetId": 16
      },
      "lineNbr": 32,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2024-01-08T03:37:13Z",
      "side": 1,
      "message": "group into a struct and create static variable??",
      "range": {
        "startLine": 25,
        "startChar": 0,
        "endLine": 32,
        "endChar": 69
      },
      "revId": "c43d85c6ca98406203b4d7cd2eed690ee48bb496",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5e34179_45c97a6e",
        "filename": "lib/s2tt/src/s2tt.c",
        "patchSetId": 16
      },
      "lineNbr": 32,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2024-01-11T09:50:56Z",
      "side": 1,
      "message": "I thought about that but I was concerned that struct member indirections could be more costly than accessing individual variables and since this variables might be accessed a very large number of times, specially during realm creation, that could impact performance. I was meaning to do some thorough analysis of that later, actually.",
      "parentUuid": "8019a95b_df836224",
      "range": {
        "startLine": 25,
        "startChar": 0,
        "endLine": 32,
        "endChar": 69
      },
      "revId": "c43d85c6ca98406203b4d7cd2eed690ee48bb496",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2817675_2d77d9f7",
        "filename": "lib/s2tt/src/s2tt.c",
        "patchSetId": 16
      },
      "lineNbr": 32,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2024-01-11T18:36:22Z",
      "side": 1,
      "message": "thx. I don\u0027t think the indirection is particularly more costly. it adds an instruction to load the address in the register and for adding offsets (which can typically be one instruction), but the number of memory accesses should be the same, since this would be a static variable, and the address should be obtainable statically as opposed to loading it every time.\nwould be curious if you find otherwise. Not particular though. will resolve, but look forward to response if you do get to analyzing it .",
      "parentUuid": "f5e34179_45c97a6e",
      "range": {
        "startLine": 25,
        "startChar": 0,
        "endLine": 32,
        "endChar": 69
      },
      "revId": "c43d85c6ca98406203b4d7cd2eed690ee48bb496",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a45a00d_6ef79edf",
        "filename": "lib/s2tt/src/s2tt.c",
        "patchSetId": 16
      },
      "lineNbr": 65,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2024-01-08T03:37:13Z",
      "side": 1,
      "message": "nit: don\u0027t think saying non necessarily helps. can just be host_ns_s2tte, and host_ns_s2tte_lpa2. The other is understood to be default with no features.",
      "revId": "c43d85c6ca98406203b4d7cd2eed690ee48bb496",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6de2fb3_65ea23f9",
        "filename": "lib/s2tt/src/s2tt.c",
        "patchSetId": 16
      },
      "lineNbr": 65,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2024-01-11T09:50:56Z",
      "side": 1,
      "message": "Yes you are right. This should be changed on all the functions actually. Will do on next patch push",
      "parentUuid": "6a45a00d_6ef79edf",
      "revId": "c43d85c6ca98406203b4d7cd2eed690ee48bb496",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84a89476_dee126ee",
        "filename": "lib/s2tt/src/s2tt.c",
        "patchSetId": 16
      },
      "lineNbr": 294,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2024-01-08T03:37:13Z",
      "side": 1,
      "message": "nit:probably don\u0027t need the \u0026. same for other functions.",
      "revId": "c43d85c6ca98406203b4d7cd2eed690ee48bb496",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb372267_9db3f9b3",
        "filename": "lib/s2tt/src/s2tt.c",
        "patchSetId": 16
      },
      "lineNbr": 294,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2024-01-11T09:50:56Z",
      "side": 1,
      "message": "Yes, it is redundant. Force of habit I guess. I will fix it",
      "parentUuid": "84a89476_dee126ee",
      "revId": "c43d85c6ca98406203b4d7cd2eed690ee48bb496",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}