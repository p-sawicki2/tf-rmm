{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "96a36128_2b19ba92",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-04-18T09:27:18Z",
      "side": 1,
      "message": "still reviewing",
      "revId": "88693f8d9575282047fd6621379461eaa8ba6952",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60fd40b4_83dff6fe",
        "filename": "lib/arch/include/fpu_helpers.h",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-04-18T09:27:18Z",
      "side": 1,
      "message": "since we have simd layer, it seems that fpu_helpers need not be a public API anymore. As an addon patch we can make these headers private.",
      "revId": "88693f8d9575282047fd6621379461eaa8ba6952",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0facd49_a64e486f",
        "filename": "lib/arch/include/simd.h",
        "patchSetId": 8
      },
      "lineNbr": 27,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-04-18T09:27:18Z",
      "side": 1,
      "message": "suggest : \"simd_type\" as name.",
      "range": {
        "startLine": 27,
        "startChar": 8,
        "endLine": 27,
        "endChar": 19
      },
      "revId": "88693f8d9575282047fd6621379461eaa8ba6952",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8be942a_92053ef2",
        "filename": "lib/arch/include/simd.h",
        "patchSetId": 8
      },
      "lineNbr": 30,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-04-18T10:15:48Z",
      "side": 1,
      "message": "Function documentation will be useful for every public exported API",
      "revId": "88693f8d9575282047fd6621379461eaa8ba6952",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e603a7ca_8cda7e99",
        "filename": "lib/arch/include/simd.h",
        "patchSetId": 8
      },
      "lineNbr": 89,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-04-18T10:15:48Z",
      "side": 1,
      "message": "simd_set_type()\n\nAdd documentation that the type of simd need to be set prior to the simd_state being saved.",
      "range": {
        "startLine": 89,
        "startChar": 19,
        "endLine": 89,
        "endChar": 39
      },
      "revId": "88693f8d9575282047fd6621379461eaa8ba6952",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d73b7345_75d9f224",
        "filename": "lib/arch/include/sve_helpers.h",
        "patchSetId": 8
      },
      "lineNbr": 49,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-04-18T09:27:18Z",
      "side": 1,
      "message": "perhaps we can hold the zcr_el2 value here directly.\n\nThis value will not saved as part of simd context save but it needs to be initialized for every REC. \n\nAlso, in case of NS save, this value will need to be explicitly saved in simd_save_ns_state()",
      "range": {
        "startLine": 49,
        "startChar": 9,
        "endLine": 49,
        "endChar": 11
      },
      "revId": "88693f8d9575282047fd6621379461eaa8ba6952",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcb272c0_52308437",
        "filename": "lib/arch/src/aarch64/sve_helpers.S",
        "patchSetId": 8
      },
      "lineNbr": 34,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-04-18T10:15:48Z",
      "side": 1,
      "message": "Ideally these should be macros which are COMPILER_ASSERTed in C. Or, these functions can be in C I think.",
      "range": {
        "startLine": 34,
        "startChar": 20,
        "endLine": 34,
        "endChar": 22
      },
      "revId": "88693f8d9575282047fd6621379461eaa8ba6952",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c438013f_60e318d0",
        "filename": "lib/arch/src/aarch64/sve_helpers.S",
        "patchSetId": 8
      },
      "lineNbr": 111,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-04-18T10:15:48Z",
      "side": 1,
      "message": "should be COMPILER_ASSERTed macro",
      "range": {
        "startLine": 111,
        "startChar": 15,
        "endLine": 111,
        "endChar": 18
      },
      "revId": "88693f8d9575282047fd6621379461eaa8ba6952",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b21436c_b2c774cb",
        "filename": "lib/arch/src/aarch64/sve_helpers.S",
        "patchSetId": 8
      },
      "lineNbr": 120,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-04-18T10:15:48Z",
      "side": 1,
      "message": "this function can be in C as well.",
      "range": {
        "startLine": 120,
        "startChar": 5,
        "endLine": 120,
        "endChar": 30
      },
      "revId": "88693f8d9575282047fd6621379461eaa8ba6952",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9ded23a_992afc31",
        "filename": "lib/arch/src/aarch64/sve_helpers.S",
        "patchSetId": 8
      },
      "lineNbr": 200,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-04-18T10:15:48Z",
      "side": 1,
      "message": "should ideally use an offset which is COMPILER_ASSERTed",
      "range": {
        "startLine": 200,
        "startChar": 15,
        "endLine": 200,
        "endChar": 18
      },
      "revId": "88693f8d9575282047fd6621379461eaa8ba6952",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d44545a_abeb5797",
        "filename": "lib/arch/src/simd.c",
        "patchSetId": 8
      },
      "lineNbr": 13,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-04-18T09:27:18Z",
      "side": 1,
      "message": "nit : if size restriction is not needed, use a regular unsigned int\n\nSome documentation will be useful\n\n/* Store the max vq length supported by this CPU. We expect all CPUs in the system to support the same max vq length */",
      "range": {
        "startLine": 13,
        "startChar": 7,
        "endLine": 13,
        "endChar": 15
      },
      "revId": "88693f8d9575282047fd6621379461eaa8ba6952",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56ac31cb_892d8bcd",
        "filename": "lib/arch/src/simd.c",
        "patchSetId": 8
      },
      "lineNbr": 18,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-04-18T09:27:18Z",
      "side": 1,
      "message": "perhaps this feild is not needed. See comments about sve_state struct here : https://review.trustedfirmware.org/c/TF-RMM/tf-rmm/+/20052/8/lib/arch/include/sve_helpers.h#49\n\nthe zcr_el2 field in that structure can be used for saving the ns_value.",
      "range": {
        "startLine": 18,
        "startChar": 10,
        "endLine": 18,
        "endChar": 20
      },
      "revId": "88693f8d9575282047fd6621379461eaa8ba6952",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f85a2f03_fe62bd27",
        "filename": "lib/arch/src/simd.c",
        "patchSetId": 8
      },
      "lineNbr": 21,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-04-18T09:27:18Z",
      "side": 1,
      "message": "nit: add a newline at line 21.",
      "revId": "88693f8d9575282047fd6621379461eaa8ba6952",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "def74c02_e2752626",
        "filename": "lib/arch/src/simd.c",
        "patchSetId": 8
      },
      "lineNbr": 23,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-04-18T09:27:18Z",
      "side": 1,
      "message": "as a note , internal functions are not needed to follow prefix conventions.\n\nSome function documentation is useful\n\n/* Function to write the vq to zcr_el2 if not the same */\n\n\nThinking about it, from a testing/coverage PoV , it is usually better to avoid this if() condition and unconditionally write the vq length (taking the penalty of isb() everytime).\n\nBut I see that zcr_el2 being different from MAX is unlikely and hence lets keep this and add a test for this coverage.\n\n\nEdit: this function may not be needed if we are restoring zcr_el2 directly.",
      "range": {
        "startLine": 23,
        "startChar": 12,
        "endLine": 23,
        "endChar": 30
      },
      "revId": "88693f8d9575282047fd6621379461eaa8ba6952",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ead350dc_6bbedbd5",
        "filename": "lib/arch/src/simd.c",
        "patchSetId": 8
      },
      "lineNbr": 25,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-04-18T09:27:18Z",
      "side": 1,
      "message": "nit: u_register_t\n\nsame comments for other uses of this.",
      "range": {
        "startLine": 25,
        "startChar": 1,
        "endLine": 25,
        "endChar": 12
      },
      "revId": "88693f8d9575282047fd6621379461eaa8ba6952",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16c66ff7_9c2d6d47",
        "filename": "lib/arch/src/simd.c",
        "patchSetId": 8
      },
      "lineNbr": 35,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-04-18T09:27:18Z",
      "side": 1,
      "message": "Add function documentation : \n\n/* Save the SVE state when entering RMM from Realm world. This function assumes that VQ in zcr_el2 is correct and will not attempt to configure VQ */",
      "revId": "88693f8d9575282047fd6621379461eaa8ba6952",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63f79aa0_39224752",
        "filename": "lib/arch/src/simd.c",
        "patchSetId": 8
      },
      "lineNbr": 62,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-04-18T09:27:18Z",
      "side": 1,
      "message": "These can be single helper function exported from sve_helpers.h\n\nWhen coming back from the Realm, do we need to set the vq ? This is only needed when save ns context right ?\n\nso we can define a function in sve_helpers.c\n\nsve_save_state(sve_state *)\n{\n   /* Save SVE registers Z */\n   sve_save_z_state((uint8_t *)\u0026simd-\u003et.sve.z);\n   /* Save SVE registers P, FFR */\n   sve_save_p_ffr_state((uint8_t *)\u0026simd-\u003et.sve.p);\n   /* Save SVE ZCR_EL12 and FPU status register */\n   sve_save_zcr_fpu_state((uint8_t *)\u0026simd-\u003et.sve.zcr_el12);\n}",
      "range": {
        "startLine": 50,
        "startChar": 2,
        "endLine": 62,
        "endChar": 59
      },
      "revId": "88693f8d9575282047fd6621379461eaa8ba6952",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b52fee4b_e609331a",
        "filename": "lib/arch/src/simd.c",
        "patchSetId": 8
      },
      "lineNbr": 69,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-04-18T09:27:18Z",
      "side": 1,
      "message": "Add function documentation\n\n/* Restore SVE state. This will also write to zcr_el2 to set the right VQ length before restore */",
      "revId": "88693f8d9575282047fd6621379461eaa8ba6952",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a6448eb_4916af85",
        "filename": "lib/arch/src/simd.c",
        "patchSetId": 8
      },
      "lineNbr": 84,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-04-18T09:27:18Z",
      "side": 1,
      "message": "We can have a single helper for the below sequence.\n\nThe zcr_el2 can be written direcly if change is made corresponding to this comment : https://review.trustedfirmware.org/c/TF-RMM/tf-rmm/+/20052/8/lib/arch/include/sve_helpers.h#49",
      "revId": "88693f8d9575282047fd6621379461eaa8ba6952",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "567febe3_37ece726",
        "filename": "lib/arch/src/simd.c",
        "patchSetId": 8
      },
      "lineNbr": 90,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-04-18T09:27:18Z",
      "side": 1,
      "message": "not needed. SVE Z registers is enough\n\nsame comment for below.",
      "range": {
        "startLine": 90,
        "startChar": 17,
        "endLine": 90,
        "endChar": 40
      },
      "revId": "88693f8d9575282047fd6621379461eaa8ba6952",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2030f10a_5e564ea9",
        "filename": "lib/arch/src/simd.c",
        "patchSetId": 8
      },
      "lineNbr": 110,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-04-18T09:27:18Z",
      "side": 1,
      "message": "nit: I prefer \"g_ns_simd[cpu_id]-\u003esaved\" and for below.",
      "range": {
        "startLine": 110,
        "startChar": 8,
        "endLine": 110,
        "endChar": 15
      },
      "revId": "88693f8d9575282047fd6621379461eaa8ba6952",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca588519_cc449518",
        "filename": "lib/arch/src/simd.c",
        "patchSetId": 8
      },
      "lineNbr": 149,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-04-18T09:27:18Z",
      "side": 1,
      "message": "this will be implicity done if https://review.trustedfirmware.org/c/TF-RMM/tf-rmm/+/20052/8/lib/arch/include/sve_helpers.h#49 change is made and sve_restore_state() does this everytime.",
      "range": {
        "startLine": 146,
        "startChar": 0,
        "endLine": 149,
        "endChar": 2
      },
      "revId": "88693f8d9575282047fd6621379461eaa8ba6952",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "731b2220_b20dfcce",
        "filename": "lib/arch/src/simd.c",
        "patchSetId": 8
      },
      "lineNbr": 186,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-04-18T09:27:18Z",
      "side": 1,
      "message": "suggest: simd_state_sve_set_vq()\n\nthis can be a macro as it seems the caller needs to check vq is already validated. In case for REC, this can be called during REC_CREATE.\n\nIf made macro, then make all alphabets CAPS.\n\nOtherwise, for the global ns_state, this can be done during init.",
      "range": {
        "startLine": 186,
        "startChar": 14,
        "endLine": 186,
        "endChar": 24
      },
      "revId": "88693f8d9575282047fd6621379461eaa8ba6952",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2757669a_0c4e9165",
        "filename": "lib/arch/src/simd.c",
        "patchSetId": 8
      },
      "lineNbr": 216,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-04-18T09:27:18Z",
      "side": 1,
      "message": "Since this is done during cold/warm boot time, it is not essential to restore this value.",
      "range": {
        "startLine": 215,
        "startChar": 0,
        "endLine": 216,
        "endChar": 7
      },
      "revId": "88693f8d9575282047fd6621379461eaa8ba6952",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9cdcf90_8cc69c71",
        "filename": "lib/arch/src/simd.c",
        "patchSetId": 8
      },
      "lineNbr": 220,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-04-18T09:27:18Z",
      "side": 1,
      "message": "nit: you can rely on zero or non - zero value of g_sve_max_vq  to flag this.",
      "range": {
        "startLine": 220,
        "startChar": 1,
        "endLine": 220,
        "endChar": 15
      },
      "revId": "88693f8d9575282047fd6621379461eaa8ba6952",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bfeb69f3_0e913162",
        "filename": "lib/arch/src/simd.c",
        "patchSetId": 8
      },
      "lineNbr": 231,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-04-18T09:27:18Z",
      "side": 1,
      "message": "zero init should take care of this or can be ensured by setting \u003d{0} , so this may not be needed.\n\nthe lines below can be added to line 241 in simd_init(). This means this function can be removed.",
      "range": {
        "startLine": 228,
        "startChar": 0,
        "endLine": 231,
        "endChar": 0
      },
      "revId": "88693f8d9575282047fd6621379461eaa8ba6952",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c503c673_2797621c",
        "filename": "lib/arch/src/simd.c",
        "patchSetId": 8
      },
      "lineNbr": 237,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-04-18T09:27:18Z",
      "side": 1,
      "message": "Add function documentation\n\n/* This function initializes the SIMD layer depending on SIMD capability of the system (FPU/SVE). The zcr_el2 will be setup to max VQ length after the init is done. */",
      "revId": "88693f8d9575282047fd6621379461eaa8ba6952",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e5ec205_f0d8ce27",
        "filename": "lib/realm/include/rec.h",
        "patchSetId": 8
      },
      "lineNbr": 94,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-04-18T10:15:48Z",
      "side": 1,
      "message": "this may not be needed if this struct is initialized during REC_CREATE",
      "range": {
        "startLine": 94,
        "startChar": 0,
        "endLine": 94,
        "endChar": 16
      },
      "revId": "88693f8d9575282047fd6621379461eaa8ba6952",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e54ee349_398b7dc8",
        "filename": "runtime/core/exit.c",
        "patchSetId": 8
      },
      "lineNbr": 343,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-04-18T10:15:48Z",
      "side": 1,
      "message": "I wonder whether disabling trap should be done outside. The simd_save_ns_state() is also enabling and disabling traps. So the trap setting and unsetting seems to be done redundantly.\n\nsimd_disable_traps()\nsimd_save_ns_state()\nsimd_restore_state(rec)\n\n\nshould be good ?",
      "range": {
        "startLine": 343,
        "startChar": 1,
        "endLine": 343,
        "endChar": 30
      },
      "revId": "88693f8d9575282047fd6621379461eaa8ba6952",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5428d97e_8e12f65d",
        "filename": "runtime/core/run.c",
        "patchSetId": 8
      },
      "lineNbr": 419,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-04-18T10:15:48Z",
      "side": 1,
      "message": "similar comments to exit.c",
      "revId": "88693f8d9575282047fd6621379461eaa8ba6952",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa21d6d9_3c59c241",
        "filename": "runtime/rmi/rec.c",
        "patchSetId": 8
      },
      "lineNbr": 282,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-04-18T10:15:48Z",
      "side": 1,
      "message": "can do necessary REC specific SIMD init here.",
      "revId": "88693f8d9575282047fd6621379461eaa8ba6952",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}