{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5c4ea8dd_9d4638fd",
        "filename": "tools/checkpatch/checkcommitmsg.py",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000010
      },
      "writtenOn": "2023-10-26T14:23:37Z",
      "side": 1,
      "message": "I would suggest to run pylint on the script. In my experience it gives good suggestions:\n\n    python3 -m pylint checkcommitmsg.py",
      "revId": "53b6e69da35b0b6a24500d8fb12a15f1aa382c24",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb3d642b_ce949fca",
        "filename": "tools/checkpatch/checkcommitmsg.py",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001107
      },
      "writtenOn": "2023-10-26T14:35:44Z",
      "side": 1,
      "message": "Thanks for the suggestion, will try it and see what suggestions it gives",
      "parentUuid": "5c4ea8dd_9d4638fd",
      "revId": "53b6e69da35b0b6a24500d8fb12a15f1aa382c24",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "feaf76ea_1c23c9b6",
        "filename": "tools/checkpatch/checkcommitmsg.py",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001107
      },
      "writtenOn": "2023-11-01T15:53:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eb3d642b_ce949fca",
      "revId": "53b6e69da35b0b6a24500d8fb12a15f1aa382c24",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84943e6f_b4540b60",
        "filename": "tools/checkpatch/checkcommitmsg.py",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1000010
      },
      "writtenOn": "2023-10-26T14:23:37Z",
      "side": 1,
      "message": "I would suggest to pass the path to the script as a parameter. ${CMAKE_SOURCE_DIR} should work.",
      "range": {
        "startLine": 51,
        "startChar": 4,
        "endLine": 52,
        "endChar": 55
      },
      "revId": "53b6e69da35b0b6a24500d8fb12a15f1aa382c24",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f5ea66d_c830e543",
        "filename": "tools/checkpatch/checkcommitmsg.py",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1001107
      },
      "writtenOn": "2023-11-01T15:53:18Z",
      "side": 1,
      "message": "Thanks, done",
      "parentUuid": "84943e6f_b4540b60",
      "range": {
        "startLine": 51,
        "startChar": 4,
        "endLine": 52,
        "endChar": 55
      },
      "revId": "53b6e69da35b0b6a24500d8fb12a15f1aa382c24",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "594ec363_6d0af5be",
        "filename": "tools/checkpatch/checkcommitmsg.py",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1000010
      },
      "writtenOn": "2023-10-26T14:31:57Z",
      "side": 1,
      "message": "Just one more thing. I spent some time with it, so I leave it here for the record:\nIt seems to be possible to construct a regular expression that only matches valid titles (not considering the length):\n\n    title_regexp \u003d re.compile(r\"^([^\\(\\):]+)(\\(([^\\)]+)\\))?: (.+)\")\n    \n    m \u003d title_regexp.match(title)\n    if m:\n        title_type \u003d m.group(1)\n        title_scope \u003d m.group(3)\n        title_desc \u003d m.group(4)\n\nIf scope not present, it will be None. Now one could argue that the regular expression is more difficult to maintain than the logic you implemented. I can accept that argument, so I\u0027m OK with the current implementation.\n\n(I can give a breakdown of the regular expression if you wish)",
      "range": {
        "startLine": 67,
        "startChar": 4,
        "endLine": 67,
        "endChar": 15
      },
      "revId": "53b6e69da35b0b6a24500d8fb12a15f1aa382c24",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7351265d_b796d67f",
        "filename": "tools/checkpatch/checkcommitmsg.py",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1001107
      },
      "writtenOn": "2023-11-01T15:53:18Z",
      "side": 1,
      "message": "That\u0027s an impressive regex!\n\nI think possibly it\u0027s easier with my method to figure out which bit went wrong in the title. For example, I believe that regex will fail to match at all if the title is missing a description, or if there\u0027s no space after the colon, instead of setting title_desc to None. There\u0027s probably a way of adjusting the regex so that it can deal with these situations though.",
      "parentUuid": "594ec363_6d0af5be",
      "range": {
        "startLine": 67,
        "startChar": 4,
        "endLine": 67,
        "endChar": 15
      },
      "revId": "53b6e69da35b0b6a24500d8fb12a15f1aa382c24",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "55ea3223_0297386b",
        "filename": "tools/checkpatch/checkcommitmsg.py",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1000010
      },
      "writtenOn": "2023-11-03T10:01:02Z",
      "side": 1,
      "message": "You are right, there are probably flaws with the regexp I posted.\n\nI\u0027m OK with your current approach",
      "parentUuid": "7351265d_b796d67f",
      "range": {
        "startLine": 67,
        "startChar": 4,
        "endLine": 67,
        "endChar": 15
      },
      "revId": "53b6e69da35b0b6a24500d8fb12a15f1aa382c24",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45a9de1d_255ae4ca",
        "filename": "tools/checkpatch/checkcommitmsg.py",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-10-26T16:08:12Z",
      "side": 1,
      "message": "keep this as 80 as we discussed in the meeting today.",
      "range": {
        "startLine": 75,
        "startChar": 20,
        "endLine": 75,
        "endChar": 22
      },
      "revId": "53b6e69da35b0b6a24500d8fb12a15f1aa382c24",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e6d93c80_cb13af60",
        "filename": "tools/checkpatch/checkcommitmsg.py",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1001107
      },
      "writtenOn": "2023-11-01T15:53:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "45a9de1d_255ae4ca",
      "range": {
        "startLine": 75,
        "startChar": 20,
        "endLine": 75,
        "endChar": 22
      },
      "revId": "53b6e69da35b0b6a24500d8fb12a15f1aa382c24",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3043845c_b63f0c6b",
        "filename": "tools/checkpatch/checkcommitmsg.py",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1000010
      },
      "writtenOn": "2023-10-26T14:23:37Z",
      "side": 1,
      "message": "Is this a requirement?\n\nThen I should probably change CBMC tool path in the patch, so that using `feat(cmbmc):` won\u0027t cause a warning https://review.trustedfirmware.org/c/TF-RMM/tf-rmm/+/23454",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 90,
        "endChar": 19
      },
      "revId": "53b6e69da35b0b6a24500d8fb12a15f1aa382c24",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3da4d33f_18ac3e24",
        "filename": "tools/checkpatch/checkcommitmsg.py",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1001107
      },
      "writtenOn": "2023-10-26T14:35:44Z",
      "side": 1,
      "message": "Hmm, good point. I think this could be changed to \"type must be lowercase\" instead, if nobody has any objections?",
      "parentUuid": "3043845c_b63f0c6b",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 90,
        "endChar": 19
      },
      "revId": "53b6e69da35b0b6a24500d8fb12a15f1aa382c24",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "216814d2_3a490722",
        "filename": "tools/checkpatch/checkcommitmsg.py",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-10-26T16:08:12Z",
      "side": 1,
      "message": "I think lets not restrict the subject to lower case. Just keep the type as lower case. \n\nThe scope can reflect the \"case\" of the folder name , but scope is a recommendation anyway and hence is not enforced. Perhaps all folders need to have lower case in RMM (separate topic).",
      "parentUuid": "3da4d33f_18ac3e24",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 90,
        "endChar": 19
      },
      "revId": "53b6e69da35b0b6a24500d8fb12a15f1aa382c24",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9d9d8c8a_feddf0b9",
        "filename": "tools/checkpatch/checkcommitmsg.py",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1001107
      },
      "writtenOn": "2023-11-01T15:53:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "216814d2_3a490722",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 90,
        "endChar": 19
      },
      "revId": "53b6e69da35b0b6a24500d8fb12a15f1aa382c24",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b7f71e0_87dc0c7e",
        "filename": "tools/checkpatch/checkcommitmsg.py",
        "patchSetId": 1
      },
      "lineNbr": 157,
      "author": {
        "id": 1000010
      },
      "writtenOn": "2023-10-26T14:23:37Z",
      "side": 1,
      "message": "To be on the safe side, it could be mandated that exactly a single change-id must be present. \n\nI found myself earlier doing a squash of multiple commits, and forgetting to clean up the commit message, resulting in multiple change-ids in the commit message. However probably this would be most useful in a pre-commit hook, so maybe it not worth including it.",
      "range": {
        "startLine": 155,
        "startChar": 8,
        "endLine": 157,
        "endChar": 32
      },
      "revId": "53b6e69da35b0b6a24500d8fb12a15f1aa382c24",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e648c324_a1a5e435",
        "filename": "tools/checkpatch/checkcommitmsg.py",
        "patchSetId": 1
      },
      "lineNbr": 157,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-10-26T16:08:12Z",
      "side": 1,
      "message": "Hmm, it is better if this checker can highlight this problem. Having 2 change-Ids is a common mistake I make as well.",
      "parentUuid": "7b7f71e0_87dc0c7e",
      "range": {
        "startLine": 155,
        "startChar": 8,
        "endLine": 157,
        "endChar": 32
      },
      "revId": "53b6e69da35b0b6a24500d8fb12a15f1aa382c24",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6d9544d4_617e79d3",
        "filename": "tools/checkpatch/checkcommitmsg.py",
        "patchSetId": 1
      },
      "lineNbr": 157,
      "author": {
        "id": 1001107
      },
      "writtenOn": "2023-11-01T15:53:18Z",
      "side": 1,
      "message": "Good idea, added a check for this",
      "parentUuid": "e648c324_a1a5e435",
      "range": {
        "startLine": 155,
        "startChar": 8,
        "endLine": 157,
        "endChar": 32
      },
      "revId": "53b6e69da35b0b6a24500d8fb12a15f1aa382c24",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f17c6bf2_72c485c1",
        "filename": "tools/checkpatch/checkcommitmsg.py",
        "patchSetId": 1
      },
      "lineNbr": 202,
      "author": {
        "id": 1000010
      },
      "writtenOn": "2023-10-26T14:23:37Z",
      "side": 1,
      "message": "Should it be mandated that trailer and the body is separated by (at least?) an empty line?",
      "range": {
        "startLine": 201,
        "startChar": 8,
        "endLine": 202,
        "endChar": 49
      },
      "revId": "53b6e69da35b0b6a24500d8fb12a15f1aa382c24",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a562f272_8d57afd4",
        "filename": "tools/checkpatch/checkcommitmsg.py",
        "patchSetId": 1
      },
      "lineNbr": 202,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-10-26T16:08:12Z",
      "side": 1,
      "message": "good suggestion. Possibly subject and message should have a empty line in between them but this is enforced in git anyway I think.",
      "parentUuid": "f17c6bf2_72c485c1",
      "range": {
        "startLine": 201,
        "startChar": 8,
        "endLine": 202,
        "endChar": 49
      },
      "revId": "53b6e69da35b0b6a24500d8fb12a15f1aa382c24",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1238c7a6_e90e6f99",
        "filename": "tools/checkpatch/checkcommitmsg.py",
        "patchSetId": 1
      },
      "lineNbr": 202,
      "author": {
        "id": 1001107
      },
      "writtenOn": "2023-11-01T15:53:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a562f272_8d57afd4",
      "range": {
        "startLine": 201,
        "startChar": 8,
        "endLine": 202,
        "endChar": 49
      },
      "revId": "53b6e69da35b0b6a24500d8fb12a15f1aa382c24",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}