{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5c4ea8dd_9d4638fd",
        "filename": "tools/checkpatch/checkcommitmsg.py",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000010
      },
      "writtenOn": "2023-10-26T14:23:37Z",
      "side": 1,
      "message": "I would suggest to run pylint on the script. In my experience it gives good suggestions:\n\n    python3 -m pylint checkcommitmsg.py",
      "revId": "53b6e69da35b0b6a24500d8fb12a15f1aa382c24",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84943e6f_b4540b60",
        "filename": "tools/checkpatch/checkcommitmsg.py",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1000010
      },
      "writtenOn": "2023-10-26T14:23:37Z",
      "side": 1,
      "message": "I would suggest to pass the path to the script as a parameter. ${CMAKE_SOURCE_DIR} should work.",
      "range": {
        "startLine": 51,
        "startChar": 4,
        "endLine": 52,
        "endChar": 55
      },
      "revId": "53b6e69da35b0b6a24500d8fb12a15f1aa382c24",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "594ec363_6d0af5be",
        "filename": "tools/checkpatch/checkcommitmsg.py",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1000010
      },
      "writtenOn": "2023-10-26T14:31:57Z",
      "side": 1,
      "message": "Just one more thing. I spent some time with it, so I leave it here for the record:\nIt seems to be possible to construct a regular expression that only matches valid titles (not considering the length):\n\n    title_regexp \u003d re.compile(r\"^([^\\(\\):]+)(\\(([^\\)]+)\\))?: (.+)\")\n    \n    m \u003d title_regexp.match(title)\n    if m:\n        title_type \u003d m.group(1)\n        title_scope \u003d m.group(3)\n        title_desc \u003d m.group(4)\n\nIf scope not present, it will be None. Now one could argue that the regular expression is more difficult to maintain than the logic you implemented. I can accept that argument, so I\u0027m OK with the current implementation.\n\n(I can give a breakdown of the regular expression if you wish)",
      "range": {
        "startLine": 67,
        "startChar": 4,
        "endLine": 67,
        "endChar": 15
      },
      "revId": "53b6e69da35b0b6a24500d8fb12a15f1aa382c24",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3043845c_b63f0c6b",
        "filename": "tools/checkpatch/checkcommitmsg.py",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1000010
      },
      "writtenOn": "2023-10-26T14:23:37Z",
      "side": 1,
      "message": "Is this a requirement?\n\nThen I should probably change CBMC tool path in the patch, so that using `feat(cmbmc):` won\u0027t cause a warning https://review.trustedfirmware.org/c/TF-RMM/tf-rmm/+/23454",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 90,
        "endChar": 19
      },
      "revId": "53b6e69da35b0b6a24500d8fb12a15f1aa382c24",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b7f71e0_87dc0c7e",
        "filename": "tools/checkpatch/checkcommitmsg.py",
        "patchSetId": 1
      },
      "lineNbr": 157,
      "author": {
        "id": 1000010
      },
      "writtenOn": "2023-10-26T14:23:37Z",
      "side": 1,
      "message": "To be on the safe side, it could be mandated that exactly a single change-id must be present. \n\nI found myself earlier doing a squash of multiple commits, and forgetting to clean up the commit message, resulting in multiple change-ids in the commit message. However probably this would be most useful in a pre-commit hook, so maybe it not worth including it.",
      "range": {
        "startLine": 155,
        "startChar": 8,
        "endLine": 157,
        "endChar": 32
      },
      "revId": "53b6e69da35b0b6a24500d8fb12a15f1aa382c24",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f17c6bf2_72c485c1",
        "filename": "tools/checkpatch/checkcommitmsg.py",
        "patchSetId": 1
      },
      "lineNbr": 202,
      "author": {
        "id": 1000010
      },
      "writtenOn": "2023-10-26T14:23:37Z",
      "side": 1,
      "message": "Should it be mandated that trailer and the body is separated by (at least?) an empty line?",
      "range": {
        "startLine": 201,
        "startChar": 8,
        "endLine": 202,
        "endChar": 49
      },
      "revId": "53b6e69da35b0b6a24500d8fb12a15f1aa382c24",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}