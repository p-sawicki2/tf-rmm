{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "dbc02bd0_0600d58c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-09T10:19:14Z",
      "side": 1,
      "message": "\"build\"",
      "range": {
        "startLine": 13,
        "startChar": 21,
        "endLine": 13,
        "endChar": 25
      },
      "revId": "e9dc23441ab125359dab56284759bdb994f1b57a",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec5e6b11_42a8cd76",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 15,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-09T10:19:14Z",
      "side": 1,
      "message": "\"host test helpers\"",
      "range": {
        "startLine": 15,
        "startChar": 41,
        "endLine": 15,
        "endChar": 62
      },
      "revId": "e9dc23441ab125359dab56284759bdb994f1b57a",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e87d66b8_0b7744a6",
        "filename": "lib/realm/tests/realm_test_utils.c",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-09T10:19:14Z",
      "side": 1,
      "message": "It is difficult to distinguish the use of expected_va test helper and call at line 27. Instead of complicating it, is it better to keep it simple and use slot_to_va always ?\n\nThere was some initial reasoning to reimplement it, but I cannot recollect it and it may not matter much in the overall scheme.",
      "revId": "e9dc23441ab125359dab56284759bdb994f1b57a",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b03dba6_70be9d0c",
        "filename": "lib/realm/tests/realm_test_utils.c",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-01-09T13:19:12Z",
      "side": 1,
      "message": "slot_to_va() returns a VA for a given slot. For fvp platform, it returns an address on the valid granules space. For the fake_host platform, it returns an address inside the array we use as granules memory (there are no \"VAs\" for the fake_host platform). For instance, granule_map() will return an address inside the array used to emulate the granules on the fake_host platform.\n\nThe VA returned by slot_to_va() on the fake_host platform can be used to write and read data to it, as it returns a valid address, but it cannot be used to validate that a specific granule has been mapped to a specific slot (the slots have specific VAs defined at build time).\n\nIf the fake_host needs to know the VA to which a given slot would be mapped on aarch64, then we need to call slot_to_expected_va(), as it will return a VA starting in SLOT_VIRT (SLOT_VIRT is calculated at build time and it depends on the number of different types of slots).\n\nFor instance, this function receives a PA (for fake_host PA and VA are the same, so the address received here corresponds to an address for the array used as granules), then it tries to find out if that address was mapped to any of the slot buffers (line 43) and once it has found a slot number, it gets the VA to which that slot would have been mapped on aarch64\n\nAll the above said, I noticed that this API is actually only used on the slot buffers test, so I should remove it from this patch and move it to that one. As the slot buffers unittests are going to need a large rework it is possible that this API will not be needed after all.",
      "parentUuid": "e87d66b8_0b7744a6",
      "revId": "e9dc23441ab125359dab56284759bdb994f1b57a",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1fe70ceb_1e376f65",
        "filename": "lib/realm/tests/realm_test_utils.c",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-01-09T13:36:08Z",
      "side": 1,
      "message": "Please dismiss my last paragraph before. I was browsing on the wrong branch",
      "parentUuid": "5b03dba6_70be9d0c",
      "revId": "e9dc23441ab125359dab56284759bdb994f1b57a",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83753758_f452ce70",
        "filename": "plat/host/host_test/include/test_helpers.h",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-09T10:19:14Z",
      "side": 1,
      "message": "\"declarations\" ;).",
      "range": {
        "startLine": 23,
        "startChar": 17,
        "endLine": 23,
        "endChar": 28
      },
      "revId": "e9dc23441ab125359dab56284759bdb994f1b57a",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce3e2f68_4106d7d6",
        "filename": "plat/host/host_test/include/test_helpers.h",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-09T10:19:14Z",
      "side": 1,
      "message": "nit: void *(*cb_buffer_map)",
      "range": {
        "startLine": 39,
        "startChar": 8,
        "endLine": 39,
        "endChar": 29
      },
      "revId": "e9dc23441ab125359dab56284759bdb994f1b57a",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ee2225d_cbbe99ce",
        "filename": "plat/host/host_test/include/test_helpers.h",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-09T10:19:14Z",
      "side": 1,
      "message": "nit: void (*cb_buffer_unmap)",
      "range": {
        "startLine": 47,
        "startChar": 8,
        "endLine": 47,
        "endChar": 12
      },
      "revId": "e9dc23441ab125359dab56284759bdb994f1b57a",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e94f3368_268628ad",
        "filename": "plat/host/host_test/src/test_helpers.c",
        "patchSetId": 2
      },
      "lineNbr": 167,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-09T10:19:14Z",
      "side": 1,
      "message": "also add: \n\n\"... We ignore the exact the cb corresponding to the cbs_id and just use the first one.\"",
      "revId": "e9dc23441ab125359dab56284759bdb994f1b57a",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b0c8690_e15239af",
        "filename": "plat/host/host_test/src/test_helpers.c",
        "patchSetId": 2
      },
      "lineNbr": 178,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-09T10:19:14Z",
      "side": 1,
      "message": "\"... We ignore the exact the cb corresponding to the cbs_id and just use the first one.\"",
      "revId": "e9dc23441ab125359dab56284759bdb994f1b57a",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}