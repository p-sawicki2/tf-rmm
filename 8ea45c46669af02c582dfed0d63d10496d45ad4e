{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6496b094_c59209b9",
        "filename": "CMakeLists.txt",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-03-06T13:59:33Z",
      "side": 1,
      "message": "can this be executed within toolchains/aarch64\n/common_aarch64.cmake and done inside that file ?",
      "revId": "8ea45c46669af02c582dfed0d63d10496d45ad4e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8219c63_c4c77ff1",
        "filename": "CMakeLists.txt",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-03-06T14:38:39Z",
      "side": 1,
      "message": "Tried that as well, but getting errors \"check_compiler_flag: C: needs to be enabled before use\". By the way, we have CXX in\nproject(RMM VERSION 0.4.0 LANGUAGES C CXX ASM)\n?",
      "parentUuid": "6496b094_c59209b9",
      "revId": "8ea45c46669af02c582dfed0d63d10496d45ad4e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4e3c399_ec2ca3d3",
        "filename": "CMakeLists.txt",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-03-06T14:39:16Z",
      "side": 1,
      "message": "Why is CXX there?",
      "parentUuid": "f8219c63_c4c77ff1",
      "revId": "8ea45c46669af02c582dfed0d63d10496d45ad4e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbbab72b_345d2c81",
        "filename": "CMakeLists.txt",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-03-07T13:49:25Z",
      "side": 1,
      "message": "CXX is for unit tests. You can define a function in the toolchain cmake and invoke it from main CMake file.\n\n```\ndiff --git a/CMakeLists.txt b/CMakeLists.txt\nindex a71e7519..9e66521c 100644\n--- a/CMakeLists.txt\n+++ b/CMakeLists.txt\n@@ -62,21 +62,7 @@ if(RMM_STATIC_ANALYSIS_CPPCHECK)\n     set(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n endif()\n \n-if(RMM_ARCH STREQUAL aarch64)\n-  include(CheckCCompilerFlag)\n-\n-  set (march_list 9.2 9.1 9 8.8 8.7 8.6 8.5)\n-  set (march_num 9_2 9_1 9 8_8 8_7 8_6 8_5)\n-\n-  foreach(v n IN ZIP_LISTS march_list march_num)\n-    check_c_compiler_flag(\"-march\u003darmv${v}-a\" COMPILER_SUPPORTS_${n})\n-    if(COMPILER_SUPPORTS_${n})\n-       set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -march\u003darmv${v}-a\")\n-       set(CMAKE_ASM_FLAGS \"${CMAKE_ASM_FLAGS} -march\u003darmv${v}-a\")\n-       break()\n-    endif()\n-  endforeach()\n-endif()\n+detect_and_set_march()\n \n #\n # Include the platform makefile\ndiff --git a/toolchains/aarch64/common_aarch64.cmake b/toolchains/aarch64/common_aarch64.cmake\nindex 458dec7e..7b9eecb5 100644\n--- a/toolchains/aarch64/common_aarch64.cmake\n+++ b/toolchains/aarch64/common_aarch64.cmake\n@@ -23,3 +23,19 @@ endforeach()\n \n string(APPEND CMAKE_EXE_LINKER_FLAGS_INIT \"-nostdlib \")\n string(APPEND CMAKE_EXE_LINKER_FLAGS_INIT \"-Wl,-pie \")\n+\n+function(detect_and_set_march)\n+  include(CheckCCompilerFlag)\n+\n+  set (march_list 9.2 9.1 9 8.8 8.7 8.6 8.5)\n+  set (march_num 9_2 9_1 9 8_8 8_7 8_6 8_5)\n+\n+  foreach(v n IN ZIP_LISTS march_list march_num)\n+    check_c_compiler_flag(\"-march\u003darmv${v}-a\" COMPILER_SUPPORTS_${\nn})\n+    if(COMPILER_SUPPORTS_${n})\n+       set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -march\u003darmv${v}-a\" PARE\nNT_SCOPE)\n+       set(CMAKE_ASM_FLAGS \"${CMAKE_ASM_FLAGS} -march\u003darmv${v}-a\" \nPARENT_SCOPE)\n+       break()\n+    endif()\n+  endforeach()\n+endfunction()\ndiff --git a/toolchains/common.cmake b/toolchains/common.cmake\nindex a725f09f..dd63cb14 100644\n--- a/toolchains/common.cmake\n+++ b/toolchains/common.cmake\n@@ -22,3 +22,7 @@ foreach(language IN ITEMS ASM C CXX)\n endforeach()\n \n string(APPEND CMAKE_EXE_LINKER_FLAGS_INIT \"-Wl,--gc-sections -g \")\n+\n+# march not applicable for fake_host\n+function(detect_and_set_march)\n+endfunction()\n+\n```",
      "parentUuid": "e4e3c399_ec2ca3d3",
      "revId": "8ea45c46669af02c582dfed0d63d10496d45ad4e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8be9ec7d_4be6cc2b",
        "filename": "CMakeLists.txt",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-03-07T15:44:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cbbab72b_345d2c81",
      "revId": "8ea45c46669af02c582dfed0d63d10496d45ad4e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9bf056c0_7ce9f1ae",
        "filename": "CMakeLists.txt",
        "patchSetId": 1
      },
      "lineNbr": 72,
      "author": {
        "id": 1000010
      },
      "writtenOn": "2024-03-06T12:10:12Z",
      "side": 1,
      "message": "It seems that `COMPILER_SUPPORTS_${n}` is not used later in the CMake script.\nSo why not simply use \n\n    check_c_compiler_flag(\"-march\u003darmv${v}-a\" COMPILER_FLAG_SUPPORTED)\n\nAnd then the `march_num` list could be eliminated?",
      "range": {
        "startLine": 72,
        "startChar": 46,
        "endLine": 72,
        "endChar": 64
      },
      "revId": "8ea45c46669af02c582dfed0d63d10496d45ad4e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce06f32a_6de05084",
        "filename": "CMakeLists.txt",
        "patchSetId": 1
      },
      "lineNbr": 72,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-03-06T12:47:27Z",
      "side": 1,
      "message": "I tried that. COMPILER_FLAG_SUPPORTED is set on 1st iteration \u0026 if fails, no other checks are performed, so I had to implement different variables for different arch options.",
      "parentUuid": "9bf056c0_7ce9f1ae",
      "range": {
        "startLine": 72,
        "startChar": 46,
        "endLine": 72,
        "endChar": 64
      },
      "revId": "8ea45c46669af02c582dfed0d63d10496d45ad4e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fc9912f6_0b4e5bbf",
        "filename": "CMakeLists.txt",
        "patchSetId": 1
      },
      "lineNbr": 72,
      "author": {
        "id": 1000010
      },
      "writtenOn": "2024-03-06T13:19:08Z",
      "side": 1,
      "message": "Ahhh, It was even documented: https://cmake.org/cmake/help/latest/module/CheckCCompilerFlag.html\nStores the result in an internal cache entry named \u003cresultVar\u003e",
      "parentUuid": "ce06f32a_6de05084",
      "range": {
        "startLine": 72,
        "startChar": 46,
        "endLine": 72,
        "endChar": 64
      },
      "revId": "8ea45c46669af02c582dfed0d63d10496d45ad4e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}