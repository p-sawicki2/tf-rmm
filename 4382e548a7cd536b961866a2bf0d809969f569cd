{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "fc9b7d51_d0edc8d4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2023-01-20T12:26:11Z",
      "side": 1,
      "message": "COMPILER_ASSERTS",
      "revId": "4382e548a7cd536b961866a2bf0d809969f569cd",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "527ab88d_b6acbe01",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-20T17:22:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fc9b7d51_d0edc8d4",
      "revId": "4382e548a7cd536b961866a2bf0d809969f569cd",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e6340ca_d74a2b8b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2023-01-20T12:26:11Z",
      "side": 1,
      "message": "are moved",
      "revId": "4382e548a7cd536b961866a2bf0d809969f569cd",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5cf9d0c9_08032ada",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-20T17:22:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0e6340ca_d74a2b8b",
      "revId": "4382e548a7cd536b961866a2bf0d809969f569cd",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f0eb03d_bc4de315",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-01-20T11:06:07Z",
      "side": 1,
      "message": "Hmmm, not sure about this change. To me, it would make more sense to have the COMPILER_ASSERT closer to the data structures we want to validate. Not only it makes it easier to check as everything is together, but you immediately notice you need to update the COMPILE_ASSERTs if you make a change to the data structures.",
      "revId": "4382e548a7cd536b961866a2bf0d809969f569cd",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6813245e_6213b2db",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-20T17:12:55Z",
      "side": 1,
      "message": "Yes, you are right that having the COMPILER_ASSERT in the same header makes maintenance easier. One of the reasons to have this header refactor is to make it easier to share headers across software stacks (like say KVM, kvm_unit_tests, TFTF etc). Having the compiler asserts in the header prevents that. One marginal benefit of this is that the COMPILER_ASSERT is only evaluated once within the C file rather than every C file the header file thus improving build.\n\nI need to make the intention clearer in the commit message.",
      "parentUuid": "6f0eb03d_bc4de315",
      "revId": "4382e548a7cd536b961866a2bf0d809969f569cd",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "df81f285_cb629635",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-20T17:22:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6813245e_6213b2db",
      "revId": "4382e548a7cd536b961866a2bf0d809969f569cd",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70852c10_9861fd20",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-01-23T11:14:10Z",
      "side": 1,
      "message": "Ok, that would make sense. But in that case, should we add comments in smc-rmi.h, right after the structure definitions, pointing out that there are assertions in smc-rmi-offsets.c and that these need to be updated/revisited upon changes on the structure?\n\nI still think it is relatively easy to forget about those. If the position of an existing field is changed, the COMPILE_ASSERT will fail, but if new fields are added at the end of the structre, nothing will happen if the COMPILE_ASSERTs are missing. So I guess adding comments there to remind to the developers (and reviewers) that they need to update the asserts accordingly would be beneficial.",
      "parentUuid": "df81f285_cb629635",
      "revId": "4382e548a7cd536b961866a2bf0d809969f569cd",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35c47034_621426ed",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-23T11:38:25Z",
      "side": 1,
      "message": "hmm, yes, but I am reluctant to add comments to this header file which are specific to RMM which may not be relevant when shared across projects. \n\nUsually the sizeof check is enough to catch when fields are added to the structure at the end, but there is slack in the RMM datastructure size so there is a corner case when COMPILER ASSERT will fail to catch modification to the file. \n\nBut given that this is a core header file and will affect the ABI , this header is unlikely to be modified by anyone other than folks involved in updating the ABI to a newer version. So the version number of ABI will get updated.\n\nSo we could add a COMPILER_ASSERT checking for specific ABI version thus any update will force update of the asserts as well.",
      "parentUuid": "70852c10_9861fd20",
      "revId": "4382e548a7cd536b961866a2bf0d809969f569cd",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "152c479c_12f75a3f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-23T11:55:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "35c47034_621426ed",
      "revId": "4382e548a7cd536b961866a2bf0d809969f569cd",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}