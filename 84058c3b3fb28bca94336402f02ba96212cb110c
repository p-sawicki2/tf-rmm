{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "36e5df92_c29b7286",
        "filename": "lib/xlat/include/xlat_tables.h",
        "patchSetId": 1
      },
      "lineNbr": 226,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-07-16T08:53:24Z",
      "side": 1,
      "message": "There is an optimization that for INV DESC to VALID desc transition that this release semantics may not needed , and there is a dsb() in the map sequence which will prevent later instructions from being ordered earlier.\n\nThis means we need another variant `xlat_write_release_tte` for the VALID to INVALID transition.\n\nNot sure whether that case is worth optimizing.",
      "revId": "84058c3b3fb28bca94336402f02ba96212cb110c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d618be2_f6283922",
        "filename": "lib/xlat/include/xlat_tables.h",
        "patchSetId": 1
      },
      "lineNbr": 226,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2024-07-16T15:27:47Z",
      "side": 1,
      "message": "simple change, let me make it. considered it but then started with the simpler change. Actually, the barrier during map is also heavier than necessary, i think i can make that NSH scoped as well, and use release only for invalidation.\nWorth the change, since mapping unmmaping seems very common in all paths in RMM.",
      "parentUuid": "36e5df92_c29b7286",
      "revId": "84058c3b3fb28bca94336402f02ba96212cb110c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03bbd785_6ab31173",
        "filename": "lib/xlat/include/xlat_tables.h",
        "patchSetId": 1
      },
      "lineNbr": 226,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2024-07-16T15:30:42Z",
      "side": 1,
      "message": "actually, during hte map sequence the DSB is only on stores, the ISB is what will prevent later instructions from being ordered earlier. otherwise, loads could be reordered before the write and fault...right?",
      "parentUuid": "4d618be2_f6283922",
      "revId": "84058c3b3fb28bca94336402f02ba96212cb110c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87b603ad_93f16608",
        "filename": "lib/xlat/include/xlat_tables.h",
        "patchSetId": 1
      },
      "lineNbr": 226,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-07-17T10:05:05Z",
      "side": 1,
      "message": "Currently both are there, so we are covered. I think generally dsb store ensures that the store is visible to all instructions succeeding it. So that is usually sufficient to prevent instructions being ordered earlier. Since MMU update is special, the store also has a side effect on instruction stream and hence the need for isb(). That\u0027s as far as my knowledge goes in this area.",
      "parentUuid": "03bbd785_6ab31173",
      "revId": "84058c3b3fb28bca94336402f02ba96212cb110c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b134e54e_7ef8f954",
        "filename": "lib/xlat/include/xlat_tables.h",
        "patchSetId": 1
      },
      "lineNbr": 226,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2024-07-17T13:37:02Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "87b603ad_93f16608",
      "revId": "84058c3b3fb28bca94336402f02ba96212cb110c",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}