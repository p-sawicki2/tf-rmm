{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a1021fc2_9bdc8f04",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2023-12-01T10:04:24Z",
      "side": 1,
      "message": "Wouldn\u0027t it be better if non-relevant attributes are cleared in the calling functions?",
      "revId": "dc66b5a607cbc9faecfa2a52a124c2b237cc0308",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ce9f067_63404609",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-12-01T11:23:11Z",
      "side": 1,
      "message": "hmm, that is a thought. It means the knowledge of measurement fields are in caller rather than measurement component. This is a viable alternative as well. You could have a prepare_rec_params_for_measurement() local function in caller which does the necessary. \n\nWould be good to get Mate\u0027s opinion as well.",
      "parentUuid": "a1021fc2_9bdc8f04",
      "revId": "dc66b5a607cbc9faecfa2a52a124c2b237cc0308",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fa5b8f0_24fb3f7d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000010
      },
      "writtenOn": "2023-12-03T09:59:05Z",
      "side": 1,
      "message": "Not sure what would be a better solution. Maybe moving the data modification outside the measurement function would make things less confusing, however Soby is right that details of how to measure gets out from the function.\n\nIt just occurred to me that another solution, that eliminates the extra buffer, and keeps the measurement knowledge inside the measurement function could be to use the psa_hash_update API. I did a proof of concept implementation here: https://review.trustedfirmware.org/c/TF-RMM/tf-rmm/+/25300",
      "parentUuid": "1ce9f067_63404609",
      "revId": "dc66b5a607cbc9faecfa2a52a124c2b237cc0308",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49761716_c70b24f5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-12-05T11:53:27Z",
      "side": 1,
      "message": "Thanks Mate for the alternate implementation. I didnot realize at the beginning , but the optimization done in this patch will allow NS to stuff random bits to padding and affect the measurement of the Realm.\n\nSo the right solution is either\n1. Allocate a zeroed buffer and copy the required fields for measurement\n2. Or do a multi-part hash update as demonstrated in Mate\u0027s prototype.\n\n\nGiven the relative complexity of the code for the 2nd approach,  I tend to favor the first solution albeit the memory overhead and memset() of the buffer.",
      "parentUuid": "7fa5b8f0_24fb3f7d",
      "revId": "dc66b5a607cbc9faecfa2a52a124c2b237cc0308",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7a47239a_bc4948a6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2023-12-18T11:19:03Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "49761716_c70b24f5",
      "revId": "dc66b5a607cbc9faecfa2a52a124c2b237cc0308",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}