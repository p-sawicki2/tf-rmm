{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "bea081f3_ad3adbbd",
        "filename": "lib/attestation/src/attestation_token.c",
        "patchSetId": 3
      },
      "lineNbr": 341,
      "author": {
        "id": 1000010
      },
      "writtenOn": "2024-06-24T09:46:34Z",
      "side": 1,
      "message": "This should be an assert instead. Or are there cases when it is function is expected to be called with invalid ctx?",
      "range": {
        "startLine": 339,
        "startChar": 0,
        "endLine": 341,
        "endChar": 2
      },
      "revId": "dbb26484354dce7f8d07a141c7e5fdf4691821a0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8629ae87_a68f5c15",
        "filename": "lib/attestation/src/attestation_token.c",
        "patchSetId": 3
      },
      "lineNbr": 341,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2024-06-26T01:04:49Z",
      "side": 1,
      "message": "this is a public function, and we shouldnt be using asserts to check validity of parameters no?\nIf this was a static function, an assert would be appropriate.",
      "parentUuid": "bea081f3_ad3adbbd",
      "range": {
        "startLine": 339,
        "startChar": 0,
        "endLine": 341,
        "endChar": 2
      },
      "revId": "dbb26484354dce7f8d07a141c7e5fdf4691821a0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "680aeed6_83879d42",
        "filename": "lib/attestation/src/attestation_token.c",
        "patchSetId": 3
      },
      "lineNbr": 341,
      "author": {
        "id": 1000010
      },
      "writtenOn": "2024-06-27T08:53:57Z",
      "side": 1,
      "message": "Your reasoning makes sense. However I think that calling this function with `ctx \u003d\u003d NULL` is probably a mistake by the user of the library. So I think it would be reasonable for this function to expect a valid `ctx`, and not silently ignore a NULL context.\n\nSo if using assert is not an option, and we want to sanitize the incoming parameters as this function is an entry point to the library, then the proper solution would be I think to have a return value for this function, and check at the calling locations whether the init was successful.",
      "parentUuid": "8629ae87_a68f5c15",
      "range": {
        "startLine": 339,
        "startChar": 0,
        "endLine": 341,
        "endChar": 2
      },
      "revId": "dbb26484354dce7f8d07a141c7e5fdf4691821a0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a8c3f88_8c388979",
        "filename": "runtime/rsi/realm_attest.c",
        "patchSetId": 3
      },
      "lineNbr": 159,
      "author": {
        "id": 1000010
      },
      "writtenOn": "2024-06-24T09:46:34Z",
      "side": 1,
      "message": "Why is it necessary to call `attest_token_ctx_init` here? Setting ATTEST_SIGN_NOT_STARTED in the state should prevent the state machine getting here without calling `handle_rsi_attest_token_init`, which calls `attest_token_ctx_init`.",
      "range": {
        "startLine": 159,
        "startChar": 2,
        "endLine": 159,
        "endChar": 80
      },
      "revId": "dbb26484354dce7f8d07a141c7e5fdf4691821a0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fd7c4a7_81cad9a7",
        "filename": "runtime/rsi/realm_attest.c",
        "patchSetId": 3
      },
      "lineNbr": 159,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2024-06-26T01:04:49Z",
      "side": 1,
      "message": "calling attest_token_init for consistency. All changes to state to ATTEST_SIGN_NOT_STARTED would be made via that function call.",
      "parentUuid": "8a8c3f88_8c388979",
      "range": {
        "startLine": 159,
        "startChar": 2,
        "endLine": 159,
        "endChar": 80
      },
      "revId": "dbb26484354dce7f8d07a141c7e5fdf4691821a0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2542e1d_9a5a7851",
        "filename": "runtime/rsi/realm_attest.c",
        "patchSetId": 3
      },
      "lineNbr": 159,
      "author": {
        "id": 1000010
      },
      "writtenOn": "2024-06-27T08:53:57Z",
      "side": 1,
      "message": "I don\u0027t think it is necessary to be consistent with this. The `state` field is part of the state machine management, while the rest of the structure is the working area of the signing process. \n\nSo those are logically two different things. Maybe it is not the most convenient thing that the state is part of the context structure, but it makes it easier passing around in functions.",
      "parentUuid": "6fd7c4a7_81cad9a7",
      "range": {
        "startLine": 159,
        "startChar": 2,
        "endLine": 159,
        "endChar": 80
      },
      "revId": "dbb26484354dce7f8d07a141c7e5fdf4691821a0",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}