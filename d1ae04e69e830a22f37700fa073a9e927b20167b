{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a6840a0a_1124d9b1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-11-20T13:45:01Z",
      "side": 1,
      "message": "Seems good to me.",
      "revId": "d1ae04e69e830a22f37700fa073a9e927b20167b",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dbac54b3_c8b00243",
        "filename": "lib/arch/include/arch.h",
        "patchSetId": 3
      },
      "lineNbr": 978,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2023-11-20T16:42:13Z",
      "side": 1,
      "message": "#define ESR_EL2_SYSREG_DC_MASK\t\t\tSYSREG_ESR(3, 7, 15, 3, 1)\n#define ESR_EL2_SYSREG_DC_SW                    SYSREG_ESR(1, 0, 7, 2, 0)\n?",
      "revId": "d1ae04e69e830a22f37700fa073a9e927b20167b",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "506d6a34_dd6ad444",
        "filename": "lib/arch/include/arch.h",
        "patchSetId": 3
      },
      "lineNbr": 978,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2023-11-21T09:44:53Z",
      "side": 1,
      "message": "\u003e #define ESR_EL2_SYSREG_DC_MASK\t\t\tSYSREG_ESR(3, 7, 15, 3, 1)\n\u003e #define ESR_EL2_SYSREG_DC_SW                    SYSREG_ESR(1, 0, 7, 2, 0)\n\u003e ?\n\nyes, thats a good suggestion. This will narrow down the range.",
      "parentUuid": "dbac54b3_c8b00243",
      "revId": "d1ae04e69e830a22f37700fa073a9e927b20167b",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f96b180c_968bbb04",
        "filename": "runtime/core/sysregs.c",
        "patchSetId": 3
      },
      "lineNbr": 264,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2023-11-21T09:53:47Z",
      "side": 1,
      "message": "Just filter out instructions with (Op2 \u003d\u003d 0) || (Crm \u003d\u003d 2).\nIt would be helpful to log ignored instructions.",
      "revId": "d1ae04e69e830a22f37700fa073a9e927b20167b",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3e297f9_eb53c62d",
        "filename": "runtime/core/sysregs.c",
        "patchSetId": 3
      },
      "lineNbr": 264,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2023-11-21T10:10:52Z",
      "side": 1,
      "message": "\u003e Just filter out instructions with (Op2 \u003d\u003d 0) || (Crm \u003d\u003d 2).\n\u003e It would be helpful to log ignored instructions.\n\nReturning a false from this function, the unhandled instructions are not logged as line #355 returns control back to the caller. This requires a re-structuring so that if any of the registered handlers returns false there has to be a common exit path. Can we take this as a follow up patch? and also advance_pc() done in handle_exception_sync for ESR_EL2_EC_SYSREG also have to move inside handle_sysreg_access_trap",
      "parentUuid": "f96b180c_968bbb04",
      "revId": "d1ae04e69e830a22f37700fa073a9e927b20167b",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2176678_cad48c75",
        "filename": "runtime/core/sysregs.c",
        "patchSetId": 3
      },
      "lineNbr": 264,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2023-11-21T10:51:59Z",
      "side": 1,
      "message": "No need to check for all these instructions encoding. If (Op2 \u003d\u003d 0) || (Crm \u003d\u003d 2), then this is not DC instruction we trap.",
      "parentUuid": "d3e297f9_eb53c62d",
      "revId": "d1ae04e69e830a22f37700fa073a9e927b20167b",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0fb12849_80ceb460",
        "filename": "runtime/core/sysregs.c",
        "patchSetId": 3
      },
      "lineNbr": 264,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2023-11-21T12:02:12Z",
      "side": 1,
      "message": "\u003e No need to check for all these instructions encoding. If (Op2 \u003d\u003d 0) || (Crm \u003d\u003d 2), then this is not DC instruction we trap.\n\nhmm ok, I thought you mentioned about logging un-handled instructions.\n\nI can check only for op2\u003d\u003d0 or Crm\u003d\u003d2, this will work. And this will remove line 264-272 and later for readability we won\u0027t know what DC instructions by set/way from realms are ignored by RMM.\nLet me know your thoughts?",
      "parentUuid": "c2176678_cad48c75",
      "revId": "d1ae04e69e830a22f37700fa073a9e927b20167b",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46629124_ee46ec41",
        "filename": "runtime/core/sysregs.c",
        "patchSetId": 3
      },
      "lineNbr": 264,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-11-21T12:26:34Z",
      "side": 1,
      "message": "Hi Arun, \n\nwe had a discussion and it seems in future , this function could end up filtering Branch record buffer instructions if RMM decides to trap it (for future). So a comment on the lines 276 :\n\n\n       ----\n\t/* We could trap Branch record buffer instructions or any other IMPDEF instructions in this encoding space. For now return to Host with SYNC exception syndrome */\n\n\trec_exit-\u003eexit_reason \u003d RMI_EXIT_SYNC;\n\trec_exit-\u003eesr \u003d esr;\n\treturn false;\n\t\n}\n\nthis should be good enough.",
      "parentUuid": "c2176678_cad48c75",
      "revId": "d1ae04e69e830a22f37700fa073a9e927b20167b",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4f3daa6d_fecb27dd",
        "filename": "runtime/core/sysregs.c",
        "patchSetId": 3
      },
      "lineNbr": 264,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2023-11-21T12:47:12Z",
      "side": 1,
      "message": "Added comment and removed the assert",
      "parentUuid": "46629124_ee46ec41",
      "revId": "d1ae04e69e830a22f37700fa073a9e927b20167b",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a736745_14fead25",
        "filename": "runtime/core/sysregs.c",
        "patchSetId": 3
      },
      "lineNbr": 273,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2023-11-20T16:48:43Z",
      "side": 1,
      "message": "So, these instructions are just ignored, should RMI_EXIT_SYNC be reported instead?",
      "revId": "d1ae04e69e830a22f37700fa073a9e927b20167b",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "350c0e0a_7cf53cca",
        "filename": "runtime/core/sysregs.c",
        "patchSetId": 3
      },
      "lineNbr": 273,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2023-11-21T09:44:53Z",
      "side": 1,
      "message": "\u003e So, these instructions are just ignored, should RMI_EXIT_SYNC be reported instead?\n\nThese instructions are ignored and RMM return back the control to Realm.\n\nI have added the RMI_EXIT_SYNC for the return to host case.",
      "parentUuid": "8a736745_14fead25",
      "revId": "d1ae04e69e830a22f37700fa073a9e927b20167b",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}