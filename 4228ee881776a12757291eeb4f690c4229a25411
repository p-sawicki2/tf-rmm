{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "97015002_fdbb5053",
        "filename": "runtime/core/aarch64/vectors.S",
        "patchSetId": 5
      },
      "lineNbr": 73,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2024-01-26T19:01:35Z",
      "side": 1,
      "message": "is the design that sp_el0 is the exception stack and not sp_elx?",
      "revId": "4228ee881776a12757291eeb4f690c4229a25411",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07dee52b_4a105945",
        "filename": "runtime/core/aarch64/vectors.S",
        "patchSetId": 5
      },
      "lineNbr": 73,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-01-29T10:20:40Z",
      "side": 1,
      "message": "Yes, that is right. We analyzed the pros and cons of using SP_ELx vs SP_EL0 and there was no major argument in favour of either.\n\nPerhaps RAS error handling might tip the argument in favour of using SP_EL2 as the exception handler (as SP_EL2 is always available for use in exception handler).\n\nUsing SP_EL0 is easiest to integrate as it was inline with existing implementation, but we can trigger a switch to Sp_EL2 as exception stack in future as we support more capabilities in RMM.",
      "parentUuid": "97015002_fdbb5053",
      "revId": "4228ee881776a12757291eeb4f690c4229a25411",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "005f9f18_52adf4eb",
        "filename": "runtime/core/aarch64/vectors.S",
        "patchSetId": 5
      },
      "lineNbr": 73,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2024-01-29T15:46:33Z",
      "side": 1,
      "message": "Acknowledged. right, generally, using a fresh stack for exceptions is at least theoretically cleaner and helps if the fault is on SP_EL0 itself, ex we failed to increase stack size when we enabled some feature, and we\u0027ve seen this in TF-A many times (which is probably an extreme-ish corner case).\nResolving, thanks.",
      "parentUuid": "07dee52b_4a105945",
      "revId": "4228ee881776a12757291eeb4f690c4229a25411",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82e0b3d4_b9371a44",
        "filename": "runtime/core/handler.c",
        "patchSetId": 5
      },
      "lineNbr": 424,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2024-01-26T19:01:35Z",
      "side": 1,
      "message": "isn\u0027t this dangerous to do? ERRORs are usually turned on in production build and this would print out. We were just discussing with OlivierD the dangers of dumping registers. Can this be turned off by build option? I don\u0027t see it.",
      "revId": "4228ee881776a12757291eeb4f690c4229a25411",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5172c776_007b7ac1",
        "filename": "runtime/core/handler.c",
        "patchSetId": 5
      },
      "lineNbr": 424,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-01-29T10:20:40Z",
      "side": 1,
      "message": "Yes, good point. This can be converted to INFO() which will not be printed for Release builds. Line 397 can be kept as ERROR, the other prints can be INFO().",
      "parentUuid": "82e0b3d4_b9371a44",
      "revId": "4228ee881776a12757291eeb4f690c4229a25411",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef9191be_807bbd1a",
        "filename": "runtime/core/handler.c",
        "patchSetId": 5
      },
      "lineNbr": 424,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-01-29T10:55:24Z",
      "side": 1,
      "message": "RMM can be built with -DLOG_LEVEL\u003d0, so there won\u0027t be any output printed.",
      "parentUuid": "5172c776_007b7ac1",
      "revId": "4228ee881776a12757291eeb4f690c4229a25411",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40ce37b7_18a9b02f",
        "filename": "runtime/core/handler.c",
        "patchSetId": 5
      },
      "lineNbr": 424,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-01-29T11:01:32Z",
      "side": 1,
      "message": "yes, but it is better to have a safe default for Release build. So prefer to keep this to INFO() and just one ERROR() message to indicate that there has been a crash in RMM.",
      "parentUuid": "ef9191be_807bbd1a",
      "revId": "4228ee881776a12757291eeb4f690c4229a25411",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5cfadc3a_d470ea50",
        "filename": "runtime/core/handler.c",
        "patchSetId": 5
      },
      "lineNbr": 424,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2024-01-29T15:46:33Z",
      "side": 1,
      "message": "thx. feel free to resolve, agree with suggestions above of using INFO.",
      "parentUuid": "40ce37b7_18a9b02f",
      "revId": "4228ee881776a12757291eeb4f690c4229a25411",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8cc958ac_c2effece",
        "filename": "runtime/core/handler.c",
        "patchSetId": 5
      },
      "lineNbr": 424,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-01-29T15:56:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5cfadc3a_d470ea50",
      "revId": "4228ee881776a12757291eeb4f690c4229a25411",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}