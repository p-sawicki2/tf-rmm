{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7421f417_b6345854",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-11T11:28:20Z",
      "side": 1,
      "message": "I have been thinking about panic() implementation in general. As a rule, I think RMM should try to return control back to EL3 via a new SMC",
      "revId": "a8cf940786a272b6aa1a59a41e2b42393b568f5f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68b72131_09675d39",
        "filename": "lib/debug/include/debug.h",
        "patchSetId": 9
      },
      "lineNbr": 10,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-11T11:28:20Z",
      "side": 1,
      "message": "Want to avoid includng platform specific header from this header. \n\nGenerally we need to think more about panic() implementation. We could have C declaration in this file for panic()\n\nno_ret void panic(void);\n \nand then a panic implementation in a C (or asm) file. The implementation could be to call an EL3-RMM SMC which will prevent EL3 from fwding any further calls to Realm world.\n\nFor test purposes, there will a harness for this SMC call which the test can re-implement and do the pass or fail.\n\nNeed to discuss more.",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 21
      },
      "revId": "a8cf940786a272b6aa1a59a41e2b42393b568f5f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff0dc4e7_a58252a0",
        "filename": "lib/debug/include/debug.h",
        "patchSetId": 9
      },
      "lineNbr": 10,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-01-11T12:36:46Z",
      "side": 1,
      "message": "Done.\n\nI removed platform.h and I introduced a *_debug.c for each architecture, where I implement panic(). Let me know what you think.",
      "parentUuid": "68b72131_09675d39",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 21
      },
      "revId": "a8cf940786a272b6aa1a59a41e2b42393b568f5f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf74cdcd_8e20160a",
        "filename": "lib/debug/include/debug.h",
        "patchSetId": 9
      },
      "lineNbr": 10,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-11T12:44:21Z",
      "side": 1,
      "message": "This is the flow I had in mind,\n\npanic() -\u003e rmm_el3_ifc_panic() -\u003e SMC(RMM_PANIC). So there is no platform involvement in this flow.\n\nnow if platform needs to do something extra, we could define plat_panic() which will be invoked from panic() but will return back to the caller. We may not need to add this plat_panic() till we get a requirement from platforms.\n\nFor Host_emulation (and test purpose), the SMC function will be emulated via a new host harness function. This can then be used to implement the unit tests for panic().\n\nGiven that this is a good chunk of work (also involving EL3), perhaps we can mark this for picking up later.",
      "parentUuid": "ff0dc4e7_a58252a0",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 21
      },
      "revId": "a8cf940786a272b6aa1a59a41e2b42393b568f5f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6af12544_2b24ae99",
        "filename": "lib/debug/include/debug.h",
        "patchSetId": 9
      },
      "lineNbr": 10,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-01-11T13:19:54Z",
      "side": 1,
      "message": "I think the rework of the panic() mechanism is outside the scope of this patch. This patch should focus only on the test layer. If we want changes on FVP and/or Host layer (e.g, notifying EL3 FW), that should be a complete separate set of patches, involving TF-A and TF-RMM, as well as updating RMM-EL3 IFC version number and the documentation.\n\nOn this patch I just moved the current implementation of the default panic() behavior (an endless loop) to the platform layers",
      "parentUuid": "bf74cdcd_8e20160a",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 21
      },
      "revId": "a8cf940786a272b6aa1a59a41e2b42393b568f5f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b551d539_a797ee1a",
        "filename": "lib/debug/include/debug.h",
        "patchSetId": 9
      },
      "lineNbr": 10,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-11T16:55:09Z",
      "side": 1,
      "message": "ok, that\u0027s fine. Moving it to platform layer implicitly makes this a platform API which is additional work for platform owners and also will have compatibility implications when removing this in future. Hence we can hold on to this patch but not merge it for now till panic() is fixed up properly.",
      "parentUuid": "6af12544_2b24ae99",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 21
      },
      "revId": "a8cf940786a272b6aa1a59a41e2b42393b568f5f",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}