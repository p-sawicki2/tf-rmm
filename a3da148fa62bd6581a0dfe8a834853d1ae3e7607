{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4ad0e97d_d12a995c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 29
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-26T14:27:47Z",
      "side": 1,
      "message": "One thing I realized is that some of the arguments like root starting level depends on whether LPA2 was enabled by NS host or not. So we cannot depend on h/w capability of LPA2 for all the validations.\n\nCan discuss on this.",
      "revId": "a3da148fa62bd6581a0dfe8a834853d1ae3e7607",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e8af2d1_201d5c6b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 29
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-27T11:02:46Z",
      "side": 1,
      "message": "To avoid disruption to EAC2 work, we can rebase on top of EAC2 patch stack.",
      "revId": "a3da148fa62bd6581a0dfe8a834853d1ae3e7607",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d5de5f0_13553020",
        "filename": "lib/realm/src/s2tt.c",
        "patchSetId": 29
      },
      "lineNbr": 28,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-26T13:01:37Z",
      "side": 1,
      "message": "nit: can move to line 34",
      "revId": "a3da148fa62bd6581a0dfe8a834853d1ae3e7607",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6452a34_460537f2",
        "filename": "lib/realm/src/s2tt.c",
        "patchSetId": 29
      },
      "lineNbr": 28,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-07-05T14:54:23Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0d5de5f0_13553020",
      "revId": "a3da148fa62bd6581a0dfe8a834853d1ae3e7607",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0a394d1_11db86e9",
        "filename": "lib/realm/src/s2tt.c",
        "patchSetId": 29
      },
      "lineNbr": 62,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-27T11:02:46Z",
      "side": 1,
      "message": "avoid any unrelated changes to avoid merge conflict.",
      "revId": "a3da148fa62bd6581a0dfe8a834853d1ae3e7607",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6604da5c_eef94901",
        "filename": "lib/realm/src/s2tt.c",
        "patchSetId": 29
      },
      "lineNbr": 62,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-07-05T14:54:23Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d0a394d1_11db86e9",
      "revId": "a3da148fa62bd6581a0dfe8a834853d1ae3e7607",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e07315d_d750f189",
        "filename": "lib/realm/src/s2tt.c",
        "patchSetId": 29
      },
      "lineNbr": 168,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-27T11:02:46Z",
      "side": 1,
      "message": "should be able to use xlat_get_oa_from_tte()",
      "range": {
        "startLine": 168,
        "startChar": 21,
        "endLine": 168,
        "endChar": 45
      },
      "revId": "a3da148fa62bd6581a0dfe8a834853d1ae3e7607",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eaeacf33_0f6a2660",
        "filename": "lib/realm/src/s2tt.c",
        "patchSetId": 29
      },
      "lineNbr": 168,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-07-05T14:54:23Z",
      "side": 1,
      "message": "I think I could but I am trying to keep this separated from the xlat library, at least for now, maybe until I have split the xlat interface into calls with translation contexts and calls w/o them.\n\nAlso, the xlat library works on stage 1, whereas this is stage 2. According to the Arm ARM, the architecture allows FEAT_LPA2 being available for one stage whilst not being available for the other. In that case, if we use xlat_get_oa_from_tte() in a platform where FEAT_LPA2 is enabled at stage 1 but not at stage 2, we would have the wrong OA, and the same would happen on the opposite scenario.\n\nWe can discuss this further later, though",
      "parentUuid": "5e07315d_d750f189",
      "range": {
        "startLine": 168,
        "startChar": 21,
        "endLine": 168,
        "endChar": 45
      },
      "revId": "a3da148fa62bd6581a0dfe8a834853d1ae3e7607",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e21d4d3_ed941b18",
        "filename": "lib/realm/src/s2tt.c",
        "patchSetId": 29
      },
      "lineNbr": 192,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-27T11:02:46Z",
      "side": 1,
      "message": "should be able to use set_oa_to_tte() instead of this.",
      "range": {
        "startLine": 192,
        "startChar": 21,
        "endLine": 192,
        "endChar": 42
      },
      "revId": "a3da148fa62bd6581a0dfe8a834853d1ae3e7607",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5104c13c_ed927576",
        "filename": "lib/realm/src/s2tt.c",
        "patchSetId": 29
      },
      "lineNbr": 192,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-07-05T14:54:23Z",
      "side": 1,
      "message": "See my comment above",
      "parentUuid": "3e21d4d3_ed941b18",
      "range": {
        "startLine": 192,
        "startChar": 21,
        "endLine": 192,
        "endChar": 42
      },
      "revId": "a3da148fa62bd6581a0dfe8a834853d1ae3e7607",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9664df67_90b76651",
        "filename": "lib/realm/src/s2tt.c",
        "patchSetId": 29
      },
      "lineNbr": 335,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-26T13:01:37Z",
      "side": 1,
      "message": "this can be a macro which takes level as arg.",
      "range": {
        "startLine": 335,
        "startChar": 21,
        "endLine": 335,
        "endChar": 33
      },
      "revId": "a3da148fa62bd6581a0dfe8a834853d1ae3e7607",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "818e925d_a31c0290",
        "filename": "lib/realm/src/s2tt.c",
        "patchSetId": 29
      },
      "lineNbr": 335,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-27T11:02:46Z",
      "side": 1,
      "message": "see comment below.",
      "parentUuid": "9664df67_90b76651",
      "range": {
        "startLine": 335,
        "startChar": 21,
        "endLine": 335,
        "endChar": 33
      },
      "revId": "a3da148fa62bd6581a0dfe8a834853d1ae3e7607",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a63033b0_850da0ba",
        "filename": "lib/realm/src/s2tt.c",
        "patchSetId": 29
      },
      "lineNbr": 335,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-07-05T14:54:23Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "818e925d_a31c0290",
      "range": {
        "startLine": 335,
        "startChar": 21,
        "endLine": 335,
        "endChar": 33
      },
      "revId": "a3da148fa62bd6581a0dfe8a834853d1ae3e7607",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "742da042_8106e3e4",
        "filename": "lib/realm/src/s2tt.c",
        "patchSetId": 29
      },
      "lineNbr": 342,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-27T11:02:46Z",
      "side": 1,
      "message": "not needed as this function will not be called for root table.",
      "range": {
        "startLine": 340,
        "startChar": 0,
        "endLine": 342,
        "endChar": 32
      },
      "revId": "a3da148fa62bd6581a0dfe8a834853d1ae3e7607",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0a59fa0_45aca1d3",
        "filename": "lib/realm/src/s2tt.c",
        "patchSetId": 29
      },
      "lineNbr": 342,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-07-05T14:54:23Z",
      "side": 1,
      "message": "Not sure about that, actually. I remember tests failing because I didn\u0027t fix this. I will double check though",
      "parentUuid": "742da042_8106e3e4",
      "range": {
        "startLine": 340,
        "startChar": 0,
        "endLine": 342,
        "endChar": 32
      },
      "revId": "a3da148fa62bd6581a0dfe8a834853d1ae3e7607",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d71751d_ea10aae3",
        "filename": "lib/realm/src/s2tt.c",
        "patchSetId": 29
      },
      "lineNbr": 361,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-26T13:01:37Z",
      "side": 1,
      "message": "dont introduce unrelated changes to keep merge conflict minimal for EAC2 patches.",
      "revId": "a3da148fa62bd6581a0dfe8a834853d1ae3e7607",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d8236c8_de2f544b",
        "filename": "lib/realm/src/s2tt.c",
        "patchSetId": 29
      },
      "lineNbr": 361,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-07-05T14:54:23Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0d71751d_ea10aae3",
      "revId": "a3da148fa62bd6581a0dfe8a834853d1ae3e7607",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0b1e5e4_c50951fe",
        "filename": "lib/realm/src/s2tt.c",
        "patchSetId": 29
      },
      "lineNbr": 442,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-27T11:02:46Z",
      "side": 1,
      "message": "this should come from realm configuration. I think every public API from this file needs an additional parameter to say whether LPA2 is enabled or not for this realm and all other calculation need to be based on that.\n\nContrary to previous discussions, since S2 will have to support both formats, I think it is easier to depend on realm config for LPA2 support and then construct the S2 table based on that (rather than depending on h/w support for LPA2 support).",
      "range": {
        "startLine": 442,
        "startChar": 23,
        "endLine": 442,
        "endChar": 45
      },
      "revId": "a3da148fa62bd6581a0dfe8a834853d1ae3e7607",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5b14937_675fd318",
        "filename": "lib/realm/src/s2tt.c",
        "patchSetId": 29
      },
      "lineNbr": 442,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-07-05T14:54:23Z",
      "side": 1,
      "message": "When I first started implementing this feature, I couldn\u0027t find a way to pass the realm descriptor information to the APIs on this call so I decided that adding an LPA2 flag on the RD wasn\u0027t useful at all. After taking a second look, I realized that I should have missed something because it can be done (s2tt RMIs receive a pointer to the RD) so that option is back on the table.\n\nHowever, I think passing an LPA2 flag (or any other LPA2 related information such as the minimum SL) to the APIs here is not very useful. Instead we could:\n\n* When FEAT_LPA2 is available to stage 2, RMM will enable and use it, as it does now. This way the s2tt library doesn\u0027t need to query the status of lpa2 for each realm, which gives a performance improvement. The host doesn\u0027t actually care about how the TTEs are implemented internally.\n\n* On the s2tt RMI handlers (rtt.c), we validate the arguments of the RMIs (such as the start level, etc) against the LPA2 flag on the RD. If the arguments are not supported (e.g we pass level -1 when the realm doesn\u0027t have support for LPA2 enabled), the handler returns straight away with the error code. It never calls the s2tt APIs and therefore there is no need to modify them. Only validate_rtt_entry_cmds(), validate_rtt_entry_cmds() and validate_rtt_map_cmds() helpers in rtt.c need to be updated to validate the arguments against the LPA2 status of the realm in question.\n\n* The s2tt library could just check some assertions, e.g check that the SL is always allowed by the platform (as done here). This won\u0027t be needed during production (the s2tt RMI handlers should already have taken care of validating the arguments), so it shouldn\u0027t introduce any overhead later.\n\nThoughts?",
      "parentUuid": "e0b1e5e4_c50951fe",
      "range": {
        "startLine": 442,
        "startChar": 23,
        "endLine": 442,
        "endChar": 45
      },
      "revId": "a3da148fa62bd6581a0dfe8a834853d1ae3e7607",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}