{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3e763c99_8910ec63",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 10
      },
      "lineNbr": 31,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2024-05-03T02:32:58Z",
      "side": 1,
      "message": "are we sure this need not be atomic? this is a RMW and refcounts typically need to be atomically written. Please resolve if because of g-\u003elock that we dont need atomic set of refcount.",
      "range": {
        "startLine": 31,
        "startChar": 4,
        "endLine": 31,
        "endChar": 14
      },
      "revId": "789e554b7600a3d63120969db571651a9076afc4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e88f384a_f20e220e",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 10
      },
      "lineNbr": 31,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-05-03T14:44:31Z",
      "side": 1,
      "message": "This is a new added function added for use in unit tests in lib\\granule\\tests\\granule.cpp instead of code:\n/* Set the refcount */\ngranule-\u003erefcount \u003d val;",
      "parentUuid": "3e763c99_8910ec63",
      "range": {
        "startLine": 31,
        "startChar": 4,
        "endLine": 31,
        "endChar": 14
      },
      "revId": "789e554b7600a3d63120969db571651a9076afc4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a2cc771_83fdaaa3",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 10
      },
      "lineNbr": 31,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2024-05-10T17:40:47Z",
      "side": 1,
      "message": "Since this function is only used on the tests, it should be a test helper, not part of the library itself. You can add this as a static function in granule.cpp",
      "parentUuid": "e88f384a_f20e220e",
      "range": {
        "startLine": 31,
        "startChar": 4,
        "endLine": 31,
        "endChar": 14
      },
      "revId": "789e554b7600a3d63120969db571651a9076afc4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0631a0a5_6c6cd802",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 10
      },
      "lineNbr": 31,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-05-13T11:06:59Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "3a2cc771_83fdaaa3",
      "range": {
        "startLine": 31,
        "startChar": 4,
        "endLine": 31,
        "endChar": 14
      },
      "revId": "789e554b7600a3d63120969db571651a9076afc4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1e33ac5_70d92610",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 10
      },
      "lineNbr": 31,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-05-20T11:39:57Z",
      "side": 1,
      "message": "Indeed this is a concern. I haven\u0027t managed to review this patch yet.",
      "parentUuid": "3e763c99_8910ec63",
      "range": {
        "startLine": 31,
        "startChar": 4,
        "endLine": 31,
        "endChar": 14
      },
      "revId": "789e554b7600a3d63120969db571651a9076afc4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a584afb5_fa25e7cc",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 10
      },
      "lineNbr": 31,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-05-20T11:40:33Z",
      "side": 1,
      "message": "I have given some comments",
      "parentUuid": "a1e33ac5_70d92610",
      "range": {
        "startLine": 31,
        "startChar": 4,
        "endLine": 31,
        "endChar": 14
      },
      "revId": "789e554b7600a3d63120969db571651a9076afc4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5813c21_40861008",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 10
      },
      "lineNbr": 31,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-06-04T12:33:44Z",
      "side": 1,
      "message": "This function removed from granule.h and its functionality is implemented in granule_set_refcount() (lib\\granule\\tests\\granule.cpp) used only for tests running on host.",
      "parentUuid": "a584afb5_fa25e7cc",
      "range": {
        "startLine": 31,
        "startChar": 4,
        "endLine": 31,
        "endChar": 14
      },
      "revId": "789e554b7600a3d63120969db571651a9076afc4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d05e964c_8a910aaf",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 10
      },
      "lineNbr": 209,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2024-05-10T17:40:47Z",
      "side": 1,
      "message": "Would it make sense to add something like \n\n assert((g-\u003edescriptor \u0026 MASK(GRN_REFCOUNT)) !\u003d MASK(GRN_REFCOUNT))\n\nto avoid overflows?",
      "range": {
        "startLine": 209,
        "startChar": 1,
        "endLine": 209,
        "endChar": 34
      },
      "revId": "789e554b7600a3d63120969db571651a9076afc4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6dc0d324_1618066b",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 10
      },
      "lineNbr": 209,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-05-13T11:06:59Z",
      "side": 1,
      "message": "I added assertions as you suggested, but then realised, that this doesn\u0027t make much sense as they aren\u0027t atomic. Even if they were, these atomic_granule_get/put() functions are called without taking granule lock, so refcount might change after checking assertion. I removed added assertions, please share opinion.",
      "parentUuid": "d05e964c_8a910aaf",
      "range": {
        "startLine": 209,
        "startChar": 1,
        "endLine": 209,
        "endChar": 34
      },
      "revId": "789e554b7600a3d63120969db571651a9076afc4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0a52cae_6299fb2e",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 10
      },
      "lineNbr": 217,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2024-05-10T17:40:47Z",
      "side": 1,
      "message": "In line with my previous comment\n\n assert((g-\u003edescriptor \u0026 MASK(GRN_REFCOUNT)) !\u003d 0)",
      "range": {
        "startLine": 217,
        "startChar": 19,
        "endLine": 217,
        "endChar": 29
      },
      "revId": "789e554b7600a3d63120969db571651a9076afc4",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}