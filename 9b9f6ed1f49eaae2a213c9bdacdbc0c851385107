{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "274be1cd_8e27abcf",
        "filename": "cmake/Modules/CoverageReport.cmake",
        "patchSetId": 21
      },
      "lineNbr": 18,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-12-08T15:48:18Z",
      "side": 1,
      "message": "dont modify CFLAGS, see below.",
      "range": {
        "startLine": 18,
        "startChar": 20,
        "endLine": 18,
        "endChar": 34
      },
      "revId": "9b9f6ed1f49eaae2a213c9bdacdbc0c851385107",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "38bf0a1c_dca484ee",
        "filename": "cmake/Modules/CoverageReport.cmake",
        "patchSetId": 21
      },
      "lineNbr": 18,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2022-12-08T16:13:16Z",
      "side": 1,
      "message": "See my comment below",
      "parentUuid": "274be1cd_8e27abcf",
      "range": {
        "startLine": 18,
        "startChar": 20,
        "endLine": 18,
        "endChar": 34
      },
      "revId": "9b9f6ed1f49eaae2a213c9bdacdbc0c851385107",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ee282ab_22621a9d",
        "filename": "cmake/Modules/CoverageReport.cmake",
        "patchSetId": 21
      },
      "lineNbr": 24,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-12-08T15:48:18Z",
      "side": 1,
      "message": "This operation can be avoided if possible. We can have  COV_C_FLAFS and this can be appended to CFlags by the caller.",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 24,
        "endChar": 46
      },
      "revId": "9b9f6ed1f49eaae2a213c9bdacdbc0c851385107",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dbe9bb61_84164727",
        "filename": "cmake/Modules/CoverageReport.cmake",
        "patchSetId": 21
      },
      "lineNbr": 24,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2022-12-08T16:13:16Z",
      "side": 1,
      "message": "That is exactly what I do on line 76. Once I have checked that C and C++ compilers both support the same flags for coverage, I append the flags there, however, I also need to do it here, one by one as there are dependencies between the flags. For instance, check for -fcoverage-mapping will fail even if supported if -ftest-coverage is not used during the check. So for each check that passes, I add the flag so it will be used for the next check.\n\nThen, once I have checked all the flags, I restore the CMAKE_${lang}_FLAGS until I am certain that both compilers support the same set of flags (that doesn\u0027t happen for instance with Clang-10), which is checked in line 74",
      "parentUuid": "6ee282ab_22621a9d",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 24,
        "endChar": 46
      },
      "revId": "9b9f6ed1f49eaae2a213c9bdacdbc0c851385107",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e4d72b3_6eee0b32",
        "filename": "cmake/Modules/CoverageReport.cmake",
        "patchSetId": 21
      },
      "lineNbr": 24,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-12-12T14:36:55Z",
      "side": 1,
      "message": "Changing CFlags can have other side-effects. hence the comment.",
      "parentUuid": "dbe9bb61_84164727",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 24,
        "endChar": 46
      },
      "revId": "9b9f6ed1f49eaae2a213c9bdacdbc0c851385107",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9f44ada_5a4de159",
        "filename": "cmake/Modules/CoverageReport.cmake",
        "patchSetId": 21
      },
      "lineNbr": 49,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-12-08T15:48:18Z",
      "side": 1,
      "message": "remove. \"ON\" is enough",
      "range": {
        "startLine": 48,
        "startChar": 35,
        "endLine": 49,
        "endChar": 37
      },
      "revId": "9b9f6ed1f49eaae2a213c9bdacdbc0c851385107",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2ea40c32_9d287f14",
        "filename": "cmake/Modules/CoverageReport.cmake",
        "patchSetId": 21
      },
      "lineNbr": 49,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2022-12-08T16:28:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f9f44ada_5a4de159",
      "range": {
        "startLine": 48,
        "startChar": 35,
        "endLine": 49,
        "endChar": 37
      },
      "revId": "9b9f6ed1f49eaae2a213c9bdacdbc0c851385107",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "842710dd_13531876",
        "filename": "cmake/Modules/CoverageReport.cmake",
        "patchSetId": 21
      },
      "lineNbr": 65,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-12-08T15:48:18Z",
      "side": 1,
      "message": "we would need to differentiate between GCC and Clang right ?",
      "range": {
        "startLine": 61,
        "startChar": 10,
        "endLine": 65,
        "endChar": 27
      },
      "revId": "9b9f6ed1f49eaae2a213c9bdacdbc0c851385107",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b7b14010_2dc29de6",
        "filename": "cmake/Modules/CoverageReport.cmake",
        "patchSetId": 21
      },
      "lineNbr": 65,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2022-12-08T16:13:16Z",
      "side": 1,
      "message": "No. No needed. All these will be tested for both, GCC and Clang. If a toolchain does not support a flag, then it will not be used.\n\nThis way, we avoid dependencies between this file and the toolchain being used.",
      "parentUuid": "842710dd_13531876",
      "range": {
        "startLine": 61,
        "startChar": 10,
        "endLine": 65,
        "endChar": 27
      },
      "revId": "9b9f6ed1f49eaae2a213c9bdacdbc0c851385107",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a67f30ea_388383e2",
        "filename": "cmake/Modules/CoverageReport.cmake",
        "patchSetId": 21
      },
      "lineNbr": 65,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-12-12T14:36:55Z",
      "side": 1,
      "message": "Hmm, there seems some flaw in the logic here. \n\nIf any one of the flag is supported then COVERAGE_SUPPORTED is set on ON. also -coverage seems to be added from GNU.cmake as well? I have given a comment to move it here.",
      "parentUuid": "b7b14010_2dc29de6",
      "range": {
        "startLine": 61,
        "startChar": 10,
        "endLine": 65,
        "endChar": 27
      },
      "revId": "9b9f6ed1f49eaae2a213c9bdacdbc0c851385107",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6527f179_69a900e5",
        "filename": "cmake/Modules/CoverageReport.cmake",
        "patchSetId": 21
      },
      "lineNbr": 84,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-12-08T15:48:18Z",
      "side": 1,
      "message": "this variable is not valid for multi-config. use $\u003cconfig\u003e here.",
      "range": {
        "startLine": 84,
        "startChar": 43,
        "endLine": 84,
        "endChar": 59
      },
      "revId": "9b9f6ed1f49eaae2a213c9bdacdbc0c851385107",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a82e506_2163f23a",
        "filename": "cmake/Modules/CoverageReport.cmake",
        "patchSetId": 21
      },
      "lineNbr": 84,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2022-12-08T16:13:16Z",
      "side": 1,
      "message": "$\u003cconfig\u003e here didn\u0027t have any effect when I tried it.",
      "parentUuid": "6527f179_69a900e5",
      "range": {
        "startLine": 84,
        "startChar": 43,
        "endLine": 84,
        "endChar": 59
      },
      "revId": "9b9f6ed1f49eaae2a213c9bdacdbc0c851385107",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b166140d_09c9e014",
        "filename": "cmake/Modules/UnitTestFramework.cmake",
        "patchSetId": 21
      },
      "lineNbr": 14,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-12-08T15:48:18Z",
      "side": 1,
      "message": "Perhaps this is not needed to mention here.",
      "range": {
        "startLine": 14,
        "startChar": 42,
        "endLine": 14,
        "endChar": 63
      },
      "revId": "9b9f6ed1f49eaae2a213c9bdacdbc0c851385107",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15d9ab4b_de3d12d1",
        "filename": "cmake/Modules/UnitTestFramework.cmake",
        "patchSetId": 21
      },
      "lineNbr": 14,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2022-12-08T16:13:16Z",
      "side": 1,
      "message": "Yes, missed this",
      "parentUuid": "b166140d_09c9e014",
      "range": {
        "startLine": 14,
        "startChar": 42,
        "endLine": 14,
        "endChar": 63
      },
      "revId": "9b9f6ed1f49eaae2a213c9bdacdbc0c851385107",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "30c64857_8077a421",
        "filename": "cmake/Modules/UnitTestFramework.cmake",
        "patchSetId": 21
      },
      "lineNbr": 14,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2022-12-08T16:28:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "15d9ab4b_de3d12d1",
      "range": {
        "startLine": 14,
        "startChar": 42,
        "endLine": 14,
        "endChar": 63
      },
      "revId": "9b9f6ed1f49eaae2a213c9bdacdbc0c851385107",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2f75261_b1cadaac",
        "filename": "toolchains/fake_host/gnu.cmake",
        "patchSetId": 21
      },
      "lineNbr": 29,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-12-08T15:48:18Z",
      "side": 1,
      "message": "It is better to encapsulate all options related to coverage in the dedicated cmake file",
      "revId": "9b9f6ed1f49eaae2a213c9bdacdbc0c851385107",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6852db6b_76ddf8ab",
        "filename": "toolchains/fake_host/gnu.cmake",
        "patchSetId": 21
      },
      "lineNbr": 29,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2022-12-08T16:13:16Z",
      "side": 1,
      "message": "If I move this to the dedicated cmake file, then that file will have a dependency with the used toolchain as depending on the toolchain we will need these or other flags. This will also add more complexity. See an answer for a similar comment here: https://review.trustedfirmware.org/c/TF-RMM/tf-rmm/+/17891/comment/26b1aa81_60b8e955/",
      "parentUuid": "f2f75261_b1cadaac",
      "revId": "9b9f6ed1f49eaae2a213c9bdacdbc0c851385107",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e6b5a13_e3d95666",
        "filename": "toolchains/fake_host/gnu.cmake",
        "patchSetId": 21
      },
      "lineNbr": 29,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-12-12T14:36:55Z",
      "side": 1,
      "message": "Sorry, I dont understand , -coverage is already on of the flags you are testing ? So it getting added from 2 places.",
      "parentUuid": "6852db6b_76ddf8ab",
      "revId": "9b9f6ed1f49eaae2a213c9bdacdbc0c851385107",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80ce911d_f999b4f9",
        "filename": "toolchains/fake_host/llvm.cmake",
        "patchSetId": 21
      },
      "lineNbr": 20,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-12-08T15:48:18Z",
      "side": 1,
      "message": "why is this needed ?",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 20,
        "endChar": 84
      },
      "revId": "9b9f6ed1f49eaae2a213c9bdacdbc0c851385107",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60c7a7e6_c9dd328d",
        "filename": "toolchains/fake_host/llvm.cmake",
        "patchSetId": 21
      },
      "lineNbr": 20,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2022-12-08T16:13:16Z",
      "side": 1,
      "message": "No needed. I forgot to remove it",
      "parentUuid": "80ce911d_f999b4f9",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 20,
        "endChar": 84
      },
      "revId": "9b9f6ed1f49eaae2a213c9bdacdbc0c851385107",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5a5b733b_126f1f6f",
        "filename": "toolchains/fake_host/llvm.cmake",
        "patchSetId": 21
      },
      "lineNbr": 20,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2022-12-08T16:28:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "60c7a7e6_c9dd328d",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 20,
        "endChar": 84
      },
      "revId": "9b9f6ed1f49eaae2a213c9bdacdbc0c851385107",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f54ed861_6620b392",
        "filename": "toolchains/fake_host/llvm.cmake",
        "patchSetId": 21
      },
      "lineNbr": 29,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-12-08T15:48:18Z",
      "side": 1,
      "message": "this can be done in dedicated Cmake file for coverage ?",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 29,
        "endChar": 37
      },
      "revId": "9b9f6ed1f49eaae2a213c9bdacdbc0c851385107",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a1f50e2_417996c7",
        "filename": "toolchains/fake_host/llvm.cmake",
        "patchSetId": 21
      },
      "lineNbr": 29,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2022-12-08T16:13:16Z",
      "side": 1,
      "message": "See my comment on this here: https://review.trustedfirmware.org/c/TF-RMM/tf-rmm/+/17891/comment/26b1aa81_60b8e955/",
      "parentUuid": "f54ed861_6620b392",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 29,
        "endChar": 37
      },
      "revId": "9b9f6ed1f49eaae2a213c9bdacdbc0c851385107",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}