{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e7fbd4a4_4a5057d9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 26
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-07-11T10:11:31Z",
      "side": 1,
      "message": "As a reference for future, this is the local changes I have to test the patch :\n\n\n```\ndiff --git a/cmake/CommonConfigs.cmake b/cmake/CommonConfigs.cmake\nindex d8c3e688..8080ddb8 100644\n--- a/cmake/CommonConfigs.cmake\n+++ b/cmake/CommonConfigs.cmake\n@@ -83,6 +83,12 @@ endif()\n target_compile_definitions(rmm-common\n     INTERFACE \"GRANULE_SHIFT\u003dU(${GRANULE_SHIFT})\")\n \n+target_compile_definitions(rmm-common\n+    INTERFACE \"VERIFICATION_FLAG\u003d1\")\n+\n+target_compile_definitions(rmm-common\n+    INTERFACE \"PERSISTENT_MODE\u003d1\")\n+\n if (RMM_MAX_GRANULES EQUAL 0x0)\n     message (FATAL_ERROR \"RMM_MAX_GRANULES not configured\")\n endif()\ndiff --git a/configs/host_defcfg.cmake b/configs/host_defcfg.cmake\nindex 6fc6f1f7..63ba566d 100644\n--- a/configs/host_defcfg.cmake\n+++ b/configs/host_defcfg.cmake\n@@ -21,6 +21,11 @@ arm_config_option_override(NAME VIRT_ADDR_SPACE_WIDTH DEFAULT 38)\n #\n arm_config_option_override(NAME RMM_MAX_SIZE DEFAULT 0x01000000)\n \n+#\n+# Maximum number of granules supported, enough to cover 2GB of DDR0.\n+#\n+arm_config_option_override(NAME RMM_MAX_GRANULES DEFAULT 0x80000)\n+\n #\n # Maximum number of translation tables allocated by the runtime context\n # for the translation library.\ndiff --git a/lib/attestation/src/attestation_key.c b/lib/attestation/src/attestation_key.c\nindex b82b7ead..6db82ddb 100644\n--- a/lib/attestation/src/attestation_key.c\n+++ b/lib/attestation/src/attestation_key.c\n@@ -107,7 +107,7 @@ int attest_init_realm_attestation_key(void)\n \t}\n \tattest_signing_key_loaded \u003d true;\n \n-#ifdef VERIFICATION_FLAG\n+#if 0\n \t/* Cached key value for speeding up the fuzzer*/\n \tunsigned char cached_key[] \u003d {\n \t\t0x04, 0x76, 0xf9, 0x88, 0x09, 0x1b, 0xe5, 0x85, 0xed, 0x41, 0x80, 0x1a,\ndiff --git a/lib/attestation/src/attestation_rnd.c b/lib/attestation/src/attestation_rnd.c\nindex 2209e14f..b676686b 100644\n--- a/lib/attestation/src/attestation_rnd.c\n+++ b/lib/attestation/src/attestation_rnd.c\n@@ -52,7 +52,7 @@ psa_status_t mbedtls_psa_external_get_random(\n \tmbedtls_psa_external_random_context_t *context,\n \tuint8_t *output, size_t output_size, size_t *output_length)\n {\n-#ifdef VERIFICATION_FLAG\n+#if 0\n \tmemset(output, 0x5a, output_size);\n #else\n \tint ret;\ndiff --git a/plat/host/host_fuzz/CMakeLists.txt b/plat/host/host_fuzz/CMakeLists.txt\nindex 7b49d9a2..e2f4801d 100644\n--- a/plat/host/host_fuzz/CMakeLists.txt\n+++ b/plat/host/host_fuzz/CMakeLists.txt\n@@ -12,7 +12,7 @@ arm_config_option_override(\n \n # Maximum number of granules supported,\n # so that fuzzing input has a reasonable size\n-arm_config_option(\n+arm_config_option_override(\n     NAME RMM_MAX_GRANULES\n     DEFAULT 0x80)\n \ndiff --git a/plat/host/host_fuzz/src/host_setup.c b/plat/host/host_fuzz/src/host_setup.c\nindex 2e2a0695..ef0bfac0 100644\n--- a/plat/host/host_fuzz/src/host_setup.c\n+++ b/plat/host/host_fuzz/src/host_setup.c\n@@ -100,7 +100,7 @@ void execute(unsigned char *buffer)\n \t/* Call commands. */\n \tfor (int i \u003d 0; i \u003c FUZZ_COMMAND_COUNT; ++i) {\n \n-\t\tINFO(\"SMC ARGS: 0x%08X 0x%016lX 0x%016lX 0x%016lX 0x%016lX 0x%016lX 0x%016lX\\n\"\n+\t\tINFO(\"SMC ARGS: 0x%08lX 0x%016lX 0x%016lX 0x%016lX 0x%016lX 0x%016lX 0x%016lX\\n\"\n \t\t\t, call_invocation[i][0]\n \t\t\t, call_invocation[i][1]\n \t\t\t, call_invocation[i][2]\n@@ -132,7 +132,6 @@ __AFL_FUZZ_INIT();\n /* To ensure checks are not optimized out it is recommended to disable\n    code optimization for the fuzzer harness main() */\n #pragma clang optimize off\n-#pragma GCC            optimize(\"O0\")\n #endif\n \n #define EXPECTED_LENGTH_FOR_FUZZ (HOST_MEM_SIZE * sizeof(unsigned char) \\\ndiff --git a/toolchains/fake_host/common_fake_host.cmake b/toolchains/fake_host/common_fake_host.cmake\nindex a9821e8d..2602ae38 100644\n--- a/toolchains/fake_host/common_fake_host.cmake\n+++ b/toolchains/fake_host/common_fake_host.cmake\n@@ -8,5 +8,5 @@ include_guard()\n include(${CMAKE_CURRENT_LIST_DIR}/../common.cmake)\n\n foreach(language IN ITEMS ASM C CXX)\n-    string(APPEND CMAKE_${language}_FLAGS_INIT \"-fno-omit-frame-pointer -pg \")\n+    string(APPEND CMAKE_${language}_FLAGS_INIT \"-fno-omit-frame-pointer \")\n endforeach()\n\n```\n\nThe compile and run commands are :\n\n```\nrm -rf build; cmake -DRMM_CONFIG\u003dhost_defcfg -DHOST_VARIANT\u003dhost_fuzz -DCMAKE_BUILD_TYPE\u003dDebug -DCMAKE_C_COMPILER\u003d/work/github/rmm/AFLplusplus/afl-clang-fast -DRMM_TOOLCHAIN\u003dllvm -S . -B build -DRMM_COVERAGE\u003dON\n\ncmake --build build -- run-fuzzer\n\ncmake --build build -- run-coverage\n\n```",
      "revId": "b0201e77004e656d2cdaf7b29e5a2d5399ff7928",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4070fd63_653104a6",
        "filename": "docs/resources/application-notes/fuzzing.rst",
        "patchSetId": 26
      },
      "lineNbr": 12,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-07-10T16:56:42Z",
      "side": 1,
      "message": "we need not mandate lto. IN fact on my local build the afl-clang-lto is not being generated for some reason.",
      "range": {
        "startLine": 12,
        "startChar": 1,
        "endLine": 12,
        "endChar": 15
      },
      "revId": "b0201e77004e656d2cdaf7b29e5a2d5399ff7928",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0abe3df5_a7ac8ea3",
        "filename": "docs/resources/application-notes/fuzzing.rst",
        "patchSetId": 26
      },
      "lineNbr": 12,
      "author": {
        "id": 1000948
      },
      "writtenOn": "2024-07-16T12:55:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4070fd63_653104a6",
      "range": {
        "startLine": 12,
        "startChar": 1,
        "endLine": 12,
        "endChar": 15
      },
      "revId": "b0201e77004e656d2cdaf7b29e5a2d5399ff7928",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3778d71c_69d5146f",
        "filename": "docs/resources/application-notes/fuzzing.rst",
        "patchSetId": 26
      },
      "lineNbr": 103,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-07-10T16:56:42Z",
      "side": 1,
      "message": "the general norm is the tools should be present in the PATH of the shell. The RMM CMake should find the appropriate tool and configure it automatically (using find_program()).\n\nI think generally if -DRMM_TOOLCHAIN\u003dllvm is specified, then fuzzer should try to use 1. afl-clang-lto or if not found 2. afl-clang-fast.\n\nif -DRMM_TOOLCHAIN\u003dgnu is specified, then fuzzer should try to use 1. afl-gcc-fast\n\nFor me , afl-gcc did not work some reason.",
      "range": {
        "startLine": 101,
        "startChar": 10,
        "endLine": 103,
        "endChar": 52
      },
      "revId": "b0201e77004e656d2cdaf7b29e5a2d5399ff7928",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "59f65adc_6433742a",
        "filename": "docs/resources/application-notes/fuzzing.rst",
        "patchSetId": 26
      },
      "lineNbr": 103,
      "author": {
        "id": 1000948
      },
      "writtenOn": "2024-07-16T12:55:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3778d71c_69d5146f",
      "range": {
        "startLine": 101,
        "startChar": 10,
        "endLine": 103,
        "endChar": 52
      },
      "revId": "b0201e77004e656d2cdaf7b29e5a2d5399ff7928",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7fce169_346cc945",
        "filename": "docs/resources/application-notes/fuzzing.rst",
        "patchSetId": 26
      },
      "lineNbr": 104,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-07-10T16:56:42Z",
      "side": 1,
      "message": "this should be provided to the build system via defines in cmakefile.",
      "range": {
        "startLine": 104,
        "startChar": 27,
        "endLine": 104,
        "endChar": 64
      },
      "revId": "b0201e77004e656d2cdaf7b29e5a2d5399ff7928",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f686af29_98da9c84",
        "filename": "docs/resources/application-notes/fuzzing.rst",
        "patchSetId": 26
      },
      "lineNbr": 104,
      "author": {
        "id": 1000948
      },
      "writtenOn": "2024-07-16T12:55:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b7fce169_346cc945",
      "range": {
        "startLine": 104,
        "startChar": 27,
        "endLine": 104,
        "endChar": 64
      },
      "revId": "b0201e77004e656d2cdaf7b29e5a2d5399ff7928",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2621d471_3dfe6276",
        "filename": "docs/resources/application-notes/fuzzing.rst",
        "patchSetId": 26
      },
      "lineNbr": 149,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-07-10T16:56:42Z",
      "side": 1,
      "message": "If these are AFL command line , can we provide an example on how to provide this via RMM build ?",
      "revId": "b0201e77004e656d2cdaf7b29e5a2d5399ff7928",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ae26b911_0e483dc7",
        "filename": "docs/resources/application-notes/fuzzing.rst",
        "patchSetId": 26
      },
      "lineNbr": 149,
      "author": {
        "id": 1000948
      },
      "writtenOn": "2024-07-16T12:55:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2621d471_3dfe6276",
      "revId": "b0201e77004e656d2cdaf7b29e5a2d5399ff7928",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf6ac144_10583de4",
        "filename": "lib/arch/src/vmid.c",
        "patchSetId": 26
      },
      "lineNbr": 21,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-07-10T16:56:42Z",
      "side": 1,
      "message": "this change is not needed it seems",
      "revId": "b0201e77004e656d2cdaf7b29e5a2d5399ff7928",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "96eaef5d_125f31c9",
        "filename": "lib/arch/src/vmid.c",
        "patchSetId": 26
      },
      "lineNbr": 21,
      "author": {
        "id": 1000948
      },
      "writtenOn": "2024-07-11T14:23:05Z",
      "side": 1,
      "message": "Revert",
      "parentUuid": "bf6ac144_10583de4",
      "revId": "b0201e77004e656d2cdaf7b29e5a2d5399ff7928",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b378b689_22d34cb1",
        "filename": "lib/attestation/src/attestation_key.c",
        "patchSetId": 26
      },
      "lineNbr": 110,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-07-10T16:56:42Z",
      "side": 1,
      "message": "I dont like this modification in code. It doesn\u0027t seem this code path is being invoked. In PERSISTENT mode, RMM is only booted once, so this overhead may not matter ?",
      "revId": "b0201e77004e656d2cdaf7b29e5a2d5399ff7928",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2b30c0e0_73704892",
        "filename": "lib/attestation/src/attestation_key.c",
        "patchSetId": 26
      },
      "lineNbr": 110,
      "author": {
        "id": 1000948
      },
      "writtenOn": "2024-07-11T14:23:05Z",
      "side": 1,
      "message": "I inherited this change from Kis Imre, which affects the performance. I had a second thought: since we are running fuzzing, it is better we cover as much code as possible. I will revert it.",
      "parentUuid": "b378b689_22d34cb1",
      "revId": "b0201e77004e656d2cdaf7b29e5a2d5399ff7928",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38385020_70fc0505",
        "filename": "lib/granule/src/granule.c",
        "patchSetId": 26
      },
      "lineNbr": 18,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-07-10T16:56:42Z",
      "side": 1,
      "message": "can implement a function to return a pointer to this struct rather than exporting this symbol.",
      "revId": "b0201e77004e656d2cdaf7b29e5a2d5399ff7928",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9218aaeb_600bce84",
        "filename": "lib/granule/src/granule.c",
        "patchSetId": 26
      },
      "lineNbr": 18,
      "author": {
        "id": 1000948
      },
      "writtenOn": "2024-07-11T14:23:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "38385020_70fc0505",
      "revId": "b0201e77004e656d2cdaf7b29e5a2d5399ff7928",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9fabb89_d195156f",
        "filename": "lib/t_cose/CMakeLists.txt",
        "patchSetId": 26
      },
      "lineNbr": 28,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-07-10T16:56:42Z",
      "side": 1,
      "message": "why is this added ?",
      "revId": "b0201e77004e656d2cdaf7b29e5a2d5399ff7928",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33d4d10f_02547860",
        "filename": "lib/t_cose/CMakeLists.txt",
        "patchSetId": 26
      },
      "lineNbr": 28,
      "author": {
        "id": 1000948
      },
      "writtenOn": "2024-07-11T14:23:05Z",
      "side": 1,
      "message": "Mate suggests this change.",
      "parentUuid": "f9fabb89_d195156f",
      "revId": "b0201e77004e656d2cdaf7b29e5a2d5399ff7928",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4efc3de_a512cd0d",
        "filename": "lib/t_cose/CMakeLists.txt",
        "patchSetId": 26
      },
      "lineNbr": 28,
      "author": {
        "id": 1000010
      },
      "writtenOn": "2024-07-16T09:36:12Z",
      "side": 1,
      "message": "I\u0027ve seen a linker error if keywrap wasn\u0027t disabled. I recall that it happened when I was compiling with a non-LTO compiler. I didn\u0027t investigate the details.",
      "parentUuid": "33d4d10f_02547860",
      "revId": "b0201e77004e656d2cdaf7b29e5a2d5399ff7928",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b472ed6_d1e9ebea",
        "filename": "lib/t_cose/CMakeLists.txt",
        "patchSetId": 26
      },
      "lineNbr": 28,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-07-17T11:09:31Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "c4efc3de_a512cd0d",
      "revId": "b0201e77004e656d2cdaf7b29e5a2d5399ff7928",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9fa2280e_3d606e66",
        "filename": "plat/host/common/src/host_utils.c",
        "patchSetId": 26
      },
      "lineNbr": 28,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-07-10T16:56:42Z",
      "side": 1,
      "message": "can export a helper. I think the helper may already be present as part unit tests",
      "revId": "b0201e77004e656d2cdaf7b29e5a2d5399ff7928",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d3862ea_ccaa7e5b",
        "filename": "plat/host/common/src/host_utils.c",
        "patchSetId": 26
      },
      "lineNbr": 28,
      "author": {
        "id": 1000948
      },
      "writtenOn": "2024-07-11T14:23:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9fa2280e_3d606e66",
      "revId": "b0201e77004e656d2cdaf7b29e5a2d5399ff7928",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "582632d2_385893a1",
        "filename": "plat/host/host_fuzz/CMakeLists.txt",
        "patchSetId": 26
      },
      "lineNbr": 15,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-07-10T16:56:42Z",
      "side": 1,
      "message": "arm_config_option_override() should be used here. I suspect that is why this was not working.",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 15,
        "endChar": 17
      },
      "revId": "b0201e77004e656d2cdaf7b29e5a2d5399ff7928",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0571d4c9_d7ae02a3",
        "filename": "plat/host/host_fuzz/CMakeLists.txt",
        "patchSetId": 26
      },
      "lineNbr": 15,
      "author": {
        "id": 1000948
      },
      "writtenOn": "2024-07-11T14:23:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "582632d2_385893a1",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 15,
        "endChar": 17
      },
      "revId": "b0201e77004e656d2cdaf7b29e5a2d5399ff7928",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b64e8da_d38e0f29",
        "filename": "plat/host/host_fuzz/src/host_setup.c",
        "patchSetId": 26
      },
      "lineNbr": 160,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-07-10T16:56:42Z",
      "side": 1,
      "message": "is the non persistent mode tested ?",
      "revId": "b0201e77004e656d2cdaf7b29e5a2d5399ff7928",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3da28968_c9d7122c",
        "filename": "plat/host/host_fuzz/src/host_setup.c",
        "patchSetId": 26
      },
      "lineNbr": 160,
      "author": {
        "id": 1000948
      },
      "writtenOn": "2024-07-11T14:23:05Z",
      "side": 1,
      "message": "Yes, I used it to check the crash found by AFL++. One may need to use non-persistent mode, i.e., reading input from file, to re-confirm (1) if an assert is trigger and (2) where is the assert.",
      "parentUuid": "3b64e8da_d38e0f29",
      "revId": "b0201e77004e656d2cdaf7b29e5a2d5399ff7928",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}