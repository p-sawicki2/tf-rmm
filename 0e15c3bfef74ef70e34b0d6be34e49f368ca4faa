{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "18c6aff2_32f41640",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2024-07-17T08:13:26Z",
      "side": 1,
      "message": "Have you verified that the unittests pass with these changes?",
      "revId": "0e15c3bfef74ef70e34b0d6be34e49f368ca4faa",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ae69d90_e03b68fa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-07-17T11:06:08Z",
      "side": 1,
      "message": "The current changes are good. There is a pending optimization to remove the release semantics from Invalid to valid transition for a tte.",
      "revId": "0e15c3bfef74ef70e34b0d6be34e49f368ca4faa",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5b0279a_f2794f94",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2024-07-17T13:37:02Z",
      "side": 1,
      "message": "maybe i misunderstood where you are seeing the optimization. i thoiught i made this change, since invalid to valid (mapping) uses the normal write to TTE and the unmap uses the new tte with release semantics. is there another place where it needs to be optimized?",
      "parentUuid": "0ae69d90_e03b68fa",
      "revId": "0e15c3bfef74ef70e34b0d6be34e49f368ca4faa",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3860724b_16322565",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-07-17T13:53:35Z",
      "side": 1,
      "message": "ah, sorry, I was viewing the previous patch set for this file and got mixed up. All good now.",
      "parentUuid": "c5b0279a_f2794f94",
      "revId": "0e15c3bfef74ef70e34b0d6be34e49f368ca4faa",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "372ddae3_4b6bc193",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000114
      },
      "writtenOn": "2024-07-17T16:43:19Z",
      "side": 1,
      "message": "yep, but presumably these are overriden on the x86 build so shouldnt be of impact.",
      "parentUuid": "18c6aff2_32f41640",
      "revId": "0e15c3bfef74ef70e34b0d6be34e49f368ca4faa",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4ff7f919_1f305c2d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-07-18T13:09:00Z",
      "side": 1,
      "message": "started rmm-main job https://jenkins.openci.aws.arm.com/view/RMM/job/rmm-main/724/",
      "revId": "0e15c3bfef74ef70e34b0d6be34e49f368ca4faa",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d2199557_0051321e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-07-18T13:13:12Z",
      "side": 1,
      "message": "new run started here : https://jenkins.openci.aws.arm.com/view/RMM/job/rmm-main/725/",
      "parentUuid": "4ff7f919_1f305c2d",
      "revId": "0e15c3bfef74ef70e34b0d6be34e49f368ca4faa",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "004ccade_0e24e5e4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1001079
      },
      "writtenOn": "2024-07-18T13:35:19Z",
      "side": 1,
      "message": "The patch assumes that, because only that core makes the access to such temporary mapping, the RMM doesn\u0027t have to invalidate the TLB caches on other cores.\nCouldn\u0027t find it in ARM ARM so maybe somebody can help...\n1. Do we need to invalidate shared TLB caches?\n2. ... if so, does the new tlbi instruction (tlbivae2) invalidate shared TLB caches?\n3. Can a speculative read (on another core) create an entry in TLB cache (on that other core)?",
      "revId": "0e15c3bfef74ef70e34b0d6be34e49f368ca4faa",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}