{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0f6e7598_5dea61dc",
        "filename": "lib/xlat/tests/xlat_tests_g2.cpp",
        "patchSetId": 26
      },
      "lineNbr": 51,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-29T06:34:35Z",
      "side": 1,
      "message": "use XLAT_GET_TABLE_ENTRIES()",
      "range": {
        "startLine": 49,
        "startChar": 1,
        "endLine": 51,
        "endChar": 29
      },
      "revId": "2ba66ce1b291b0e18e65395a7d5a7594fc56cc77",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f40c573_c1a1f7e0",
        "filename": "lib/xlat/tests/xlat_tests_g2.cpp",
        "patchSetId": 26
      },
      "lineNbr": 51,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-06-29T10:34:12Z",
      "side": 1,
      "message": "XLAT_GET_TABLE_ENTRIES() returns the number of entries on a table given the level. Here we need the shift to calculate a maximum va space as per level.\n\nI could use a \u0027*\u0027 with XLAT_GET_TABLE_ENTRIES() instead of the \u0027\u003c\u003c\u0027 operator, but I think the latter might be easier to understand?",
      "parentUuid": "0f6e7598_5dea61dc",
      "range": {
        "startLine": 49,
        "startChar": 1,
        "endLine": 51,
        "endChar": 29
      },
      "revId": "2ba66ce1b291b0e18e65395a7d5a7594fc56cc77",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e224bea_43af52c7",
        "filename": "lib/xlat/tests/xlat_tests_g2.cpp",
        "patchSetId": 26
      },
      "lineNbr": 51,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-29T11:02:05Z",
      "side": 1,
      "message": "I think it is better to use existing macros where possible.\n\n*va_size \u003d (1ULL \u003c\u003c XLAT_ADDR_SHIFT(level)) * XLAT_GET_TABLE_ENTRIES(level);",
      "parentUuid": "2f40c573_c1a1f7e0",
      "range": {
        "startLine": 49,
        "startChar": 1,
        "endLine": 51,
        "endChar": 29
      },
      "revId": "2ba66ce1b291b0e18e65395a7d5a7594fc56cc77",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e25f03ae_df238c3d",
        "filename": "lib/xlat/tests/xlat_tests_g2.cpp",
        "patchSetId": 26
      },
      "lineNbr": 51,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-06-29T11:24:13Z",
      "side": 1,
      "message": "Yeah, I think you are right. I still have this big resistance towards using macros and/or functions on the library to test to write the tests themselves....",
      "parentUuid": "1e224bea_43af52c7",
      "range": {
        "startLine": 49,
        "startChar": 1,
        "endLine": 51,
        "endChar": 29
      },
      "revId": "2ba66ce1b291b0e18e65395a7d5a7594fc56cc77",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fe02f6a9_6e530613",
        "filename": "lib/xlat/tests/xlat_tests_g2.cpp",
        "patchSetId": 26
      },
      "lineNbr": 51,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-06-29T14:19:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e25f03ae_df238c3d",
      "range": {
        "startLine": 49,
        "startChar": 1,
        "endLine": 51,
        "endChar": 29
      },
      "revId": "2ba66ce1b291b0e18e65395a7d5a7594fc56cc77",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7ad41f4_de3a0499",
        "filename": "lib/xlat/tests/xlat_tests_g2.cpp",
        "patchSetId": 26
      },
      "lineNbr": 549,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-29T06:34:35Z",
      "side": 1,
      "message": "fix up alignment. Same comment for below lines.",
      "range": {
        "startLine": 549,
        "startChar": 0,
        "endLine": 549,
        "endChar": 4
      },
      "revId": "2ba66ce1b291b0e18e65395a7d5a7594fc56cc77",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3bb75b48_8faf8e6f",
        "filename": "lib/xlat/tests/xlat_tests_g2.cpp",
        "patchSetId": 26
      },
      "lineNbr": 549,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-06-29T10:34:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a7ad41f4_de3a0499",
      "range": {
        "startLine": 549,
        "startChar": 0,
        "endLine": 549,
        "endChar": 4
      },
      "revId": "2ba66ce1b291b0e18e65395a7d5a7594fc56cc77",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "febaef70_629a96bb",
        "filename": "lib/xlat/tests/xlat_tests_g2.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1171,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-29T06:34:35Z",
      "side": 1,
      "message": "maximum",
      "range": {
        "startLine": 1171,
        "startChar": 14,
        "endLine": 1171,
        "endChar": 22
      },
      "revId": "2ba66ce1b291b0e18e65395a7d5a7594fc56cc77",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bc32fcb4_965afd68",
        "filename": "lib/xlat/tests/xlat_tests_g2.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1171,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-06-29T10:34:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "febaef70_629a96bb",
      "range": {
        "startLine": 1171,
        "startChar": 14,
        "endLine": 1171,
        "endChar": 22
      },
      "revId": "2ba66ce1b291b0e18e65395a7d5a7594fc56cc77",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "782dc58e_db4bc243",
        "filename": "lib/xlat/tests/xlat_tests_g2.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1695,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-29T05:33:22Z",
      "side": 1,
      "message": "This should be TTE_OA_BITS_50_51 ?",
      "range": {
        "startLine": 1695,
        "startChar": 22,
        "endLine": 1695,
        "endChar": 35
      },
      "revId": "2ba66ce1b291b0e18e65395a7d5a7594fc56cc77",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a925ec00_bdfa1096",
        "filename": "lib/xlat/tests/xlat_tests_g2.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1695,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-06-29T10:34:12Z",
      "side": 1,
      "message": "No. This is alright. If the PA size is \u003e 48 bits, assignation in line 1690 would have assigned the two MSB of the address to bits [50,51] of the TTE, so we need to reset those to zero, which is done here. Then we assign the MSBs to the right place in the assignment below.",
      "parentUuid": "782dc58e_db4bc243",
      "range": {
        "startLine": 1695,
        "startChar": 22,
        "endLine": 1695,
        "endChar": 35
      },
      "revId": "2ba66ce1b291b0e18e65395a7d5a7594fc56cc77",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43ae854b_536b8f9b",
        "filename": "lib/xlat/tests/xlat_tests_g2.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1695,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-29T11:02:05Z",
      "side": 1,
      "message": "hmm, it is confusing to clear the UPPER_ATTRS() (bits[50:51]) of the tte here where the PA is being assigned. And this is being done only for LPA2 case whereas non-LPA2 case , the UPPER_ATTRS() are not cleared.\n\nIdeally set_oa_to_tte() helper should be used here.",
      "parentUuid": "a925ec00_bdfa1096",
      "range": {
        "startLine": 1695,
        "startChar": 22,
        "endLine": 1695,
        "endChar": 35
      },
      "revId": "2ba66ce1b291b0e18e65395a7d5a7594fc56cc77",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2115119a_fb2dc2dc",
        "filename": "lib/xlat/tests/xlat_tests_g2.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1695,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-06-29T11:24:13Z",
      "side": 1,
      "message": "set_oa_to_tte() is and internal helper indirectly tested by this test (and by any test which indirectly calls to xlat_desc() for instance, such as xlat_ctx_init()) so we cannot use it here. Actually, this bit of code here, tests that set_oa_to_tte() worked as expected and placed MSBs of the PA where they corresponded.\n\nAlso, this is only done for the case in which FEAT_LPA2 is enabled because it is the only situation in which we have PA \u003e 48 bits. It is not necessary to do it when FEAT_LPA2 is disabled as bits [51,50] of the PA will be 0 in this case. In fact, this line was before the \u0027if\u0027 in a previous patchset, but I decided to move it here as it only had effect when FEAT_LPA2 was enabled.\n\nAlso, xlat_test_helpers_get_attrs() doesn\u0027t set bits [51,50], so it is safe to apply the mask here.",
      "parentUuid": "43ae854b_536b8f9b",
      "range": {
        "startLine": 1695,
        "startChar": 22,
        "endLine": 1695,
        "endChar": 35
      },
      "revId": "2ba66ce1b291b0e18e65395a7d5a7594fc56cc77",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d856a2d_87880f8e",
        "filename": "lib/xlat/tests/xlat_tests_g2.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1695,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-06-29T11:58:03Z",
      "side": 1,
      "message": "I can make line 1692 like\n\nval_tte |\u003d (pa \u0026  XLAT_ADDR_MASK(end_lvl) \u0026 ~MASK(OA_BITS_50_51));\n\nif that looks better to you",
      "parentUuid": "2115119a_fb2dc2dc",
      "range": {
        "startLine": 1695,
        "startChar": 22,
        "endLine": 1695,
        "endChar": 35
      },
      "revId": "2ba66ce1b291b0e18e65395a7d5a7594fc56cc77",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc6ccc20_f290a322",
        "filename": "lib/xlat/tests/xlat_tests_g2.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1695,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-29T12:44:47Z",
      "side": 1,
      "message": "As dicussed, the XLAT_TESTS_PA_MASK macro can be removed, The implementation would then look like:\n\n pa \u003d init_mmap[j].base_va;\n\n /*\n  * Add an arbitrary offset to PA to be passed to\n  * xlat_map_memory_page_with_attrs()\n  */\n pa +\u003d test_helpers_get_rand_in_range(1,\n\t\t\tXLAT_BLOCK_SIZE(end_lvl) - 1);\n\n tte |\u003d set_oa_to_tte(pa \u0026 XLAT_ADDR_MASK(end_lvl));",
      "parentUuid": "0d856a2d_87880f8e",
      "range": {
        "startLine": 1695,
        "startChar": 22,
        "endLine": 1695,
        "endChar": 35
      },
      "revId": "2ba66ce1b291b0e18e65395a7d5a7594fc56cc77",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2fc6f0d7_64a8d296",
        "filename": "lib/xlat/tests/xlat_tests_g2.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1695,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-06-29T14:19:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bc6ccc20_f290a322",
      "range": {
        "startLine": 1695,
        "startChar": 22,
        "endLine": 1695,
        "endChar": 35
      },
      "revId": "2ba66ce1b291b0e18e65395a7d5a7594fc56cc77",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46d1501b_cfb1becc",
        "filename": "lib/xlat/tests/xlat_tests_g2.cpp",
        "patchSetId": 26
      },
      "lineNbr": 2143,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-29T05:33:22Z",
      "side": 1,
      "message": "is this needed since  ? For stage2 we program vtcr_el2 I think.",
      "range": {
        "startLine": 2140,
        "startChar": 0,
        "endLine": 2143,
        "endChar": 2
      },
      "revId": "2ba66ce1b291b0e18e65395a7d5a7594fc56cc77",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c3eba608_94073a18",
        "filename": "lib/xlat/tests/xlat_tests_g2.cpp",
        "patchSetId": 26
      },
      "lineNbr": 2143,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-06-29T10:34:12Z",
      "side": 1,
      "message": "This was the original code that I replaced by the assignment below (the right call here was to is_feat_lap2_4k_present() instead of is_feat_lap2_4k_2_present() although the tests used to pass because I enabled LPA2 for both stages). Somehow, in one of the rollbacks I presume, both the original and the fixed version got merged. I will remove this.",
      "parentUuid": "46d1501b_cfb1becc",
      "range": {
        "startLine": 2140,
        "startChar": 0,
        "endLine": 2143,
        "endChar": 2
      },
      "revId": "2ba66ce1b291b0e18e65395a7d5a7594fc56cc77",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5442b40_b02c2797",
        "filename": "lib/xlat/tests/xlat_tests_g2.cpp",
        "patchSetId": 26
      },
      "lineNbr": 2323,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-29T05:33:22Z",
      "side": 1,
      "message": "\"checks for this\"",
      "range": {
        "startLine": 2323,
        "startChar": 25,
        "endLine": 2323,
        "endChar": 45
      },
      "revId": "2ba66ce1b291b0e18e65395a7d5a7594fc56cc77",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "820a7cf0_966593ef",
        "filename": "lib/xlat/tests/xlat_tests_g2.cpp",
        "patchSetId": 26
      },
      "lineNbr": 2323,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-06-29T10:34:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d5442b40_b02c2797",
      "range": {
        "startLine": 2323,
        "startChar": 25,
        "endLine": 2323,
        "endChar": 45
      },
      "revId": "2ba66ce1b291b0e18e65395a7d5a7594fc56cc77",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b58e7d97_d5d84b22",
        "filename": "lib/xlat/tests/xlat_tests_g2.cpp",
        "patchSetId": 26
      },
      "lineNbr": 2389,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-29T06:34:35Z",
      "side": 1,
      "message": "`tbls`",
      "range": {
        "startLine": 2389,
        "startChar": 4,
        "endLine": 2389,
        "endChar": 11
      },
      "revId": "2ba66ce1b291b0e18e65395a7d5a7594fc56cc77",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5e389f9_dae7c567",
        "filename": "lib/xlat/tests/xlat_tests_g2.cpp",
        "patchSetId": 26
      },
      "lineNbr": 2389,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-29T06:35:13Z",
      "side": 1,
      "message": "\u0027tbls\u0027",
      "parentUuid": "b58e7d97_d5d84b22",
      "range": {
        "startLine": 2389,
        "startChar": 4,
        "endLine": 2389,
        "endChar": 11
      },
      "revId": "2ba66ce1b291b0e18e65395a7d5a7594fc56cc77",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a6f87ad_fd9760b2",
        "filename": "lib/xlat/tests/xlat_tests_g2.cpp",
        "patchSetId": 26
      },
      "lineNbr": 2389,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-06-29T10:34:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c5e389f9_dae7c567",
      "range": {
        "startLine": 2389,
        "startChar": 4,
        "endLine": 2389,
        "endChar": 11
      },
      "revId": "2ba66ce1b291b0e18e65395a7d5a7594fc56cc77",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4377846_f82dea8d",
        "filename": "plat/host/common/src/host_utils.c",
        "patchSetId": 26
      },
      "lineNbr": 162,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-06-29T06:34:35Z",
      "side": 1,
      "message": "\"...and LPA2 4K granule support for stage 1 and stage 2.\"",
      "range": {
        "startLine": 162,
        "startChar": 8,
        "endLine": 162,
        "endChar": 22
      },
      "revId": "2ba66ce1b291b0e18e65395a7d5a7594fc56cc77",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "268962e1_42281d98",
        "filename": "plat/host/common/src/host_utils.c",
        "patchSetId": 26
      },
      "lineNbr": 162,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-06-29T10:34:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c4377846_f82dea8d",
      "range": {
        "startLine": 162,
        "startChar": 8,
        "endLine": 162,
        "endChar": 22
      },
      "revId": "2ba66ce1b291b0e18e65395a7d5a7594fc56cc77",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}