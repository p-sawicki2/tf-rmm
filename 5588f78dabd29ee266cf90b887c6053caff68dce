{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7b49c321_e66a5bc1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 27
      },
      "lineNbr": 7,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-12-13T13:54:39Z",
      "side": 1,
      "message": "\"report\".",
      "range": {
        "startLine": 7,
        "startChar": 38,
        "endLine": 7,
        "endChar": 43
      },
      "revId": "5588f78dabd29ee266cf90b887c6053caff68dce",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dde0fe99_7cbe14e4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 27
      },
      "lineNbr": 12,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-12-13T13:54:39Z",
      "side": 1,
      "message": "correct this.",
      "range": {
        "startLine": 12,
        "startChar": 33,
        "endLine": 12,
        "endChar": 76
      },
      "revId": "5588f78dabd29ee266cf90b887c6053caff68dce",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1171fcf5_3f1f6987",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 27
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-12-13T13:54:39Z",
      "side": 1,
      "message": "Almost there.",
      "revId": "5588f78dabd29ee266cf90b887c6053caff68dce",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72fe590c_27121655",
        "filename": "cmake/Modules/CoverageReport.cmake",
        "patchSetId": 27
      },
      "lineNbr": 69,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-12-13T13:54:39Z",
      "side": 1,
      "message": "add this to the to pre-requisite in the docs. Also add instructions to install gcovr in docs.",
      "range": {
        "startLine": 69,
        "startChar": 33,
        "endLine": 69,
        "endChar": 38
      },
      "revId": "5588f78dabd29ee266cf90b887c6053caff68dce",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb95c73a_574cbefc",
        "filename": "cmake/Modules/CoverageReport.cmake",
        "patchSetId": 27
      },
      "lineNbr": 103,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-12-13T13:54:39Z",
      "side": 1,
      "message": "Can be written as\n\nelse if(CMAKE_C_COMPILER_ID STREQUAL \"GNU\")\n  # Using GNU Select the coverage flags to test\n  set(COVERAGE_FLAGS\n       -coverage)\n\n  # Flags needed to enable coverage testing\n  string(APPEND CMAKE_EXE_LINKER_FLAGS \" -coverage -lgcov \")\nelse()\n   message(WARNING \"Toolchain ${CMAKE_C_COMPILER_ID} does not support coverage\")\n   return()\nendif()",
      "range": {
        "startLine": 91,
        "startChar": 2,
        "endLine": 103,
        "endChar": 17
      },
      "revId": "5588f78dabd29ee266cf90b887c6053caff68dce",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43f1b236_7bf7f787",
        "filename": "cmake/Modules/CoverageReport.cmake",
        "patchSetId": 27
      },
      "lineNbr": 135,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-12-13T13:54:39Z",
      "side": 1,
      "message": "\"Rule for Coverage report generation\"",
      "range": {
        "startLine": 135,
        "startChar": 4,
        "endLine": 135,
        "endChar": 28
      },
      "revId": "5588f78dabd29ee266cf90b887c6053caff68dce",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6506dfd_a9da1ada",
        "filename": "cmake/Modules/CoverageReport.cmake",
        "patchSetId": 27
      },
      "lineNbr": 145,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-12-13T15:04:45Z",
      "side": 1,
      "message": "On testing with Ninja generator and specifying multi-target, I found that the coverage report is not generated as intended. This is because Ninja is a parallel build and does not know about the dependancy in sequence and I assumed that Ninja will honour the multi-target order specified on cmd line which is not the case.\n\n\nSo , it seems we need to specify the dependancy on run-unitests target. We did have this dependancy initially but removed it as wanted this to run on different host variants.\n\nWe can still keep that behaviour but also enforce ordering by adding these lines here (line 146):\n\n  #\n  # Add dependency on unit test target if being invoked in a\n  # multi-target build command line.\n  #\n  #if(RMM_UNITTESTS)\n  #  add_dependencies(create-coverage run-unittests)\n  #endif()\n\n\nIn future we can keep appending this list we have more variants to generate coverage for.",
      "revId": "5588f78dabd29ee266cf90b887c6053caff68dce",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3472fef_7138560c",
        "filename": "docs/getting_started/build-options.rst",
        "patchSetId": 27
      },
      "lineNbr": 226,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-12-13T13:54:39Z",
      "side": 1,
      "message": "coverage",
      "range": {
        "startLine": 226,
        "startChar": 49,
        "endLine": 226,
        "endChar": 57
      },
      "revId": "5588f78dabd29ee266cf90b887c6053caff68dce",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}