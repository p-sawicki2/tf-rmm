{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "02706ecc_b0410b7f",
        "filename": "lib/realm/CMakeLists.txt",
        "patchSetId": 3
      },
      "lineNbr": 56,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-23T17:06:24Z",
      "side": 1,
      "message": "Is this change needed ?",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 56,
        "endChar": 17
      },
      "revId": "5e9bea3d1755b6dcc1978ac15d2e0b0ef3d9fe7d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f6805d7_07fce6d8",
        "filename": "lib/realm/CMakeLists.txt",
        "patchSetId": 3
      },
      "lineNbr": 69,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-23T17:06:24Z",
      "side": 1,
      "message": "as discussed in previous patch, this can be added to another Cmakelists in tests folder and depending on RMM_UTESTS value, can skip or progress.",
      "revId": "5e9bea3d1755b6dcc1978ac15d2e0b0ef3d9fe7d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f112eeff_8d04571c",
        "filename": "lib/realm/src/buffer_private.h",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-23T17:06:24Z",
      "side": 1,
      "message": "can go into realm/src/include folder.",
      "revId": "5e9bea3d1755b6dcc1978ac15d2e0b0ef3d9fe7d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ee891ab_1616d3ad",
        "filename": "lib/realm/tests/granule.cpp",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-23T17:06:24Z",
      "side": 1,
      "message": "relies",
      "range": {
        "startLine": 48,
        "startChar": 17,
        "endLine": 48,
        "endChar": 23
      },
      "revId": "5e9bea3d1755b6dcc1978ac15d2e0b0ef3d9fe7d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d611f140_b8980585",
        "filename": "lib/realm/tests/granule.cpp",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-23T17:06:24Z",
      "side": 1,
      "message": "Hmm, this usage got me thinking. It seems this fn is being invoked to test it!\n\nThinking further, We have previously discussed about moving the allocation of struct granule to the platform layer. It seems that , doing it, will remove a lot of issues for the unittests and will help granule module in the long run.\n\n\nIf we introduce a new API\nint plat_granule_get_struct_base(void *base, unsigned long *nr_granules)\n\n\nThen this can be utilized in granule.c (we would need a int granule_init() function to be invoked from rmm_main() as well).\n\nThis will remove RMM_MAX_GRANULES common variable and instead make it platform specific. FVP would have FVP_NR_GRANULES which needs to be a config for that platform. Host already has HOST_NR_GRANULES\n\nOnce these are done, then the test can call plat_granule_get_struct_base() to get the base of granule struct array.\n\n\nOr the alternative is to introduce a private function to get the granule_struct_base addr, but this will need to be removed when we move the allocation to the platform layer.",
      "range": {
        "startLine": 52,
        "startChar": 8,
        "endLine": 52,
        "endChar": 23
      },
      "revId": "5e9bea3d1755b6dcc1978ac15d2e0b0ef3d9fe7d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6134a614_d0d94f55",
        "filename": "lib/realm/tests/granule.cpp",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-23T17:06:24Z",
      "side": 1,
      "message": "this will probably hide issues from previous test. This seems unnecessary.  Each test needs to cleanup properly rather than expecting subsequent tests to initialize again.",
      "range": {
        "startLine": 80,
        "startChar": 2,
        "endLine": 80,
        "endChar": 8
      },
      "revId": "5e9bea3d1755b6dcc1978ac15d2e0b0ef3d9fe7d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dab081f6_d2d3868a",
        "filename": "lib/realm/tests/granule.cpp",
        "patchSetId": 3
      },
      "lineNbr": 103,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-23T17:06:24Z",
      "side": 1,
      "message": "It seems we are only testing with random addr. Instead we should test lowest addr, highest addr and then 10 random addr (in a loop) .\n\nSimilar comments for below tests.",
      "revId": "5e9bea3d1755b6dcc1978ac15d2e0b0ef3d9fe7d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48773f09_7a8f70fd",
        "filename": "lib/realm/tests/granule.cpp",
        "patchSetId": 3
      },
      "lineNbr": 253,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-23T17:45:39Z",
      "side": 1,
      "message": "This can be written in a simpler way, see below:",
      "range": {
        "startLine": 252,
        "startChar": 22,
        "endLine": 253,
        "endChar": 21
      },
      "revId": "5e9bea3d1755b6dcc1978ac15d2e0b0ef3d9fe7d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba769bca_1b359f30",
        "filename": "lib/realm/tests/granule.cpp",
        "patchSetId": 3
      },
      "lineNbr": 263,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-23T17:45:39Z",
      "side": 1,
      "message": "This should prob be:\n\nget_rand_in_range(test_get_platform_nr_granules() * GRANULE_SIZE, (test_get_platform_nr_granules() + 10) * GRANULE_SIZE);\n\n/* Add a comment, compute an address greater that valid granule range */",
      "range": {
        "startLine": 260,
        "startChar": 28,
        "endLine": 263,
        "endChar": 21
      },
      "revId": "5e9bea3d1755b6dcc1978ac15d2e0b0ef3d9fe7d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6387a17b_660fb0ba",
        "filename": "lib/realm/tests/granule.cpp",
        "patchSetId": 3
      },
      "lineNbr": 274,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-23T17:45:39Z",
      "side": 1,
      "message": "this will not work if granules_below is 1.\n\n\nGRANULE_SIZE * get_rand_in_range(0, (host_util_get_granule_base()/GRANULE_SIZE) - 1)",
      "range": {
        "startLine": 274,
        "startChar": 7,
        "endLine": 274,
        "endChar": 25
      },
      "revId": "5e9bea3d1755b6dcc1978ac15d2e0b0ef3d9fe7d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7e8204f_3b0f692d",
        "filename": "lib/realm/tests/granule.cpp",
        "patchSetId": 3
      },
      "lineNbr": 302,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2022-11-23T17:45:39Z",
      "side": 1,
      "message": "this is assuming we have atleast GRANULE_SIZE granule whih is not correct. \n\ng1_index \u003d get_rand_in_range(1, test_get_platform_nr_granules() - 1);\ng2_index \u003d get_rand_in_range(1, test_get_platform_nr_granules() -1);",
      "range": {
        "startLine": 302,
        "startChar": 10,
        "endLine": 302,
        "endChar": 42
      },
      "revId": "5e9bea3d1755b6dcc1978ac15d2e0b0ef3d9fe7d",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}