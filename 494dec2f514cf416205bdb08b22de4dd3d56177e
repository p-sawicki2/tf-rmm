{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "37b67ad7_d833ca1f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-20T09:47:52Z",
      "side": 1,
      "message": "need to describe what the bug is. Would be better for the test to case care rather than modify a general helper to accomodate",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 10,
        "endChar": 28
      },
      "revId": "494dec2f514cf416205bdb08b22de4dd3d56177e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0911426a_5fc9b546",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-01-20T22:32:40Z",
      "side": 1,
      "message": "Will do.\n\nThe bugs actually were the destination and source address not being tested for NULL values, as we discussed",
      "parentUuid": "37b67ad7_d833ca1f",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 10,
        "endChar": 28
      },
      "revId": "494dec2f514cf416205bdb08b22de4dd3d56177e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b95d41d2_e11c86a9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-01-23T13:45:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0911426a_5fc9b546",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 10,
        "endChar": 28
      },
      "revId": "494dec2f514cf416205bdb08b22de4dd3d56177e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "424ef375_582d931c",
        "filename": "lib/realm/tests/buffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-20T09:47:52Z",
      "side": 1,
      "message": "why is this changed? Was there an overflow in any test case ?",
      "range": {
        "startLine": 34,
        "startChar": 29,
        "endLine": 34,
        "endChar": 59
      },
      "revId": "494dec2f514cf416205bdb08b22de4dd3d56177e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5874c81f_682caf42",
        "filename": "lib/realm/tests/buffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-01-20T22:32:40Z",
      "side": 1,
      "message": "One of the assertion tests consists on trying an unaligned granule address. In order to get that address, I add a random offset between 1 and (GRANULE_SIZE - 1) to the random granule address returned by this helper. If by any chance this helper returned the last granule, then the address, including the offset to make it unaligned, would be larger than the DDR space, which will trigger a different assertion failure, masking the one that I want to test.\n\nBy never returning the last granule, I don\u0027t have that problem, as there is always room for offsets.",
      "parentUuid": "424ef375_582d931c",
      "range": {
        "startLine": 34,
        "startChar": 29,
        "endLine": 34,
        "endChar": 59
      },
      "revId": "494dec2f514cf416205bdb08b22de4dd3d56177e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a3bf512_8e139552",
        "filename": "lib/realm/tests/buffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-01-23T09:43:29Z",
      "side": 1,
      "message": "Actually, got this totally wrong. In the case this function returned the last granule, it would give the address of the beginning of that granule, thus adding the offset wouldn\u0027t cause an overflow. So this change is actually not needed. I will revert it.",
      "parentUuid": "5874c81f_682caf42",
      "range": {
        "startLine": 34,
        "startChar": 29,
        "endLine": 34,
        "endChar": 59
      },
      "revId": "494dec2f514cf416205bdb08b22de4dd3d56177e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f8f5740a_d5bcc22d",
        "filename": "lib/realm/tests/buffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-01-23T13:45:00Z",
      "side": 1,
      "message": "Done. Rolled back",
      "parentUuid": "6a3bf512_8e139552",
      "range": {
        "startLine": 34,
        "startChar": 29,
        "endLine": 34,
        "endChar": 59
      },
      "revId": "494dec2f514cf416205bdb08b22de4dd3d56177e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbe4a01f_1fb737ba",
        "filename": "lib/realm/tests/buffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 342,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-20T09:47:52Z",
      "side": 1,
      "message": "\"...less than start of valid granule addr range...\"",
      "range": {
        "startLine": 342,
        "startChar": 4,
        "endLine": 342,
        "endChar": 33
      },
      "revId": "494dec2f514cf416205bdb08b22de4dd3d56177e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "afd1b1c9_fda77b91",
        "filename": "lib/realm/tests/buffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 342,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-01-23T13:45:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cbe4a01f_1fb737ba",
      "range": {
        "startLine": 342,
        "startChar": 4,
        "endLine": 342,
        "endChar": 33
      },
      "revId": "494dec2f514cf416205bdb08b22de4dd3d56177e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "277546ad_5bec34ad",
        "filename": "lib/realm/tests/buffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 353,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-20T09:47:52Z",
      "side": 1,
      "message": "I didnt understand how this is being converted to struct_granule * and why this is considered less that valid address range",
      "range": {
        "startLine": 353,
        "startChar": 1,
        "endLine": 353,
        "endChar": 68
      },
      "revId": "494dec2f514cf416205bdb08b22de4dd3d56177e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ccf927d9_bc66fd2c",
        "filename": "lib/realm/tests/buffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 353,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-01-20T22:32:40Z",
      "side": 1,
      "message": "This is a bug actually. I mixed up host_util_get_granule_base() with get_granule_struct_base() in granule.cpp, which should return a pointer to the first struct granule available. Then, by subtracting 1 to that pointer, I would be pointing to a struct granule before the start of the granules array.\n\nThe reason why the test passed seems to be that the unaligned address was triggering an assertion failure.\n\nI will fix it. Thanks for spotting it",
      "parentUuid": "277546ad_5bec34ad",
      "range": {
        "startLine": 353,
        "startChar": 1,
        "endLine": 353,
        "endChar": 68
      },
      "revId": "494dec2f514cf416205bdb08b22de4dd3d56177e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "66049a45_0fe2a786",
        "filename": "lib/realm/tests/buffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 353,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-01-23T13:45:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ccf927d9_bc66fd2c",
      "range": {
        "startLine": 353,
        "startChar": 1,
        "endLine": 353,
        "endChar": 68
      },
      "revId": "494dec2f514cf416205bdb08b22de4dd3d56177e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1662c79f_03e42673",
        "filename": "lib/realm/tests/buffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 385,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-20T09:47:52Z",
      "side": 1,
      "message": "Did understand how this is considered above valid granule range.",
      "range": {
        "startLine": 385,
        "startChar": 1,
        "endLine": 385,
        "endChar": 68
      },
      "revId": "494dec2f514cf416205bdb08b22de4dd3d56177e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0778d997_f94ff417",
        "filename": "lib/realm/tests/buffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 385,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2023-01-20T09:48:20Z",
      "side": 1,
      "message": "Didnt*",
      "parentUuid": "1662c79f_03e42673",
      "range": {
        "startLine": 385,
        "startChar": 1,
        "endLine": 385,
        "endChar": 68
      },
      "revId": "494dec2f514cf416205bdb08b22de4dd3d56177e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "757b2ecc_fd1b82f6",
        "filename": "lib/realm/tests/buffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 385,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-01-20T22:32:40Z",
      "side": 1,
      "message": "Similar bug as on the previous comment",
      "parentUuid": "0778d997_f94ff417",
      "range": {
        "startLine": 385,
        "startChar": 1,
        "endLine": 385,
        "endChar": 68
      },
      "revId": "494dec2f514cf416205bdb08b22de4dd3d56177e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b48e26ad_7229fc57",
        "filename": "lib/realm/tests/buffer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 385,
      "author": {
        "id": 1000298
      },
      "writtenOn": "2023-01-23T13:45:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "757b2ecc_fd1b82f6",
      "range": {
        "startLine": 385,
        "startChar": 1,
        "endLine": 385,
        "endChar": 68
      },
      "revId": "494dec2f514cf416205bdb08b22de4dd3d56177e",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}