{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "89ef96a0_99052761",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-05-20T12:50:49Z",
      "side": 1,
      "message": "If we assume that ref count will have to remain 2 bytes and if state and lock can be packed into a single byte, this is still an odd number which will result in either:\n\n1. The halfword access having to be made over unaligned addresses.\n2 Or adding padding byte. \n\nDoing unaligned access is not preferred. So I am not sure whether we can make this optimization.\n\nBut your work has highlighted some areas of improvements in the code\n\n1. The state access should be via predefined APIs.\n2. Some cleanups related to inline assembly\n3. hardening of assumption related to state access using assert().",
      "revId": "7a2aa12843e322e575b488577ffb0f445733df26",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3bfa78a0_dd056f09",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-05-20T14:16:07Z",
      "side": 1,
      "message": "The other alternative moving the ref count outside the granule and make it part of RD, REC, RTT etc. This removes the need to allocate a refcount for majority of granules ?",
      "parentUuid": "89ef96a0_99052761",
      "revId": "7a2aa12843e322e575b488577ffb0f445733df26",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6a5cd71b_1aa2e031",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-05-20T14:23:10Z",
      "side": 1,
      "message": "Ignore that, RTT is an architecture table and not a custom data structure defined by RMM.",
      "parentUuid": "3bfa78a0_dd056f09",
      "revId": "7a2aa12843e322e575b488577ffb0f445733df26",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c678e936_d3683e63",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 11
      },
      "lineNbr": 38,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-05-20T11:39:57Z",
      "side": 1,
      "message": "if we are sharing the ref count with other fields, then it is possible that update of those fields will disrupt the assumptions about atomic read and acquire of refcount.",
      "revId": "7a2aa12843e322e575b488577ffb0f445733df26",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95207a79_f20ad3b4",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 11
      },
      "lineNbr": 38,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-06-04T11:02:05Z",
      "side": 1,
      "message": "The only field which can be updated is State, which is changed by granule_set_state() function called with granule bitlock held, so refcount is not effected. It is also possible to make State update atomic, so new refcount value set by other CPU will be preserved.",
      "parentUuid": "c678e936_d3683e63",
      "revId": "7a2aa12843e322e575b488577ffb0f445733df26",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "696a68fc_5b525580",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 11
      },
      "lineNbr": 38,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-06-10T13:30:04Z",
      "side": 1,
      "message": "The code as implemented before the patchset does not have the preservation property. I am checking the new EOR based implementation.",
      "parentUuid": "95207a79_f20ad3b4",
      "revId": "7a2aa12843e322e575b488577ffb0f445733df26",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "134f8a15_10d0fdbb",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 11
      },
      "lineNbr": 93,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-05-20T11:39:57Z",
      "side": 1,
      "message": "need to assert that lock is indeed held.",
      "revId": "7a2aa12843e322e575b488577ffb0f445733df26",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a3937995_7197cae6",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 11
      },
      "lineNbr": 93,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-06-04T11:02:05Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "134f8a15_10d0fdbb",
      "revId": "7a2aa12843e322e575b488577ffb0f445733df26",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5644be51_dbc33739",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 11
      },
      "lineNbr": 102,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-05-20T11:39:57Z",
      "side": 1,
      "message": "need to assert that lock is indeed held.",
      "revId": "7a2aa12843e322e575b488577ffb0f445733df26",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "29ba4c67_8c8682f0",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 11
      },
      "lineNbr": 102,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-06-04T11:02:05Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "5644be51_dbc33739",
      "revId": "7a2aa12843e322e575b488577ffb0f445733df26",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "27fb2d31_29d9eed3",
        "filename": "lib/granule/include/granule.h",
        "patchSetId": 11
      },
      "lineNbr": 102,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-06-05T11:58:18Z",
      "side": 1,
      "message": "I modified this function making setting new Status value atomic and not effecting Lock \u0026 Refcount fields by using LDEORH instruction.",
      "parentUuid": "29ba4c67_8c8682f0",
      "revId": "7a2aa12843e322e575b488577ffb0f445733df26",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06b473bf_cca5cb04",
        "filename": "lib/granule/include/granule_types.h",
        "patchSetId": 11
      },
      "lineNbr": 208,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-05-20T11:39:57Z",
      "side": 1,
      "message": "since refcount need to be atomically acquired and updated, we cannot overlap refcount with other fields. This will have to be half word.",
      "range": {
        "startLine": 208,
        "startChar": 10,
        "endLine": 208,
        "endChar": 18
      },
      "revId": "7a2aa12843e322e575b488577ffb0f445733df26",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b11a9fc5_83ce53ef",
        "filename": "lib/granule/include/granule_types.h",
        "patchSetId": 11
      },
      "lineNbr": 208,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-06-03T14:55:47Z",
      "side": 1,
      "message": "We need 10 bits to hold maximum value of 512.\nRefcount occupies last 10 bits of granule structure \u0026 cannot exceed this field. Refcount reads \u0026 updates can be done atomically \u0026 doesn\u0027t effect bitlock \u0026 status fields.",
      "parentUuid": "06b473bf_cca5cb04",
      "range": {
        "startLine": 208,
        "startChar": 10,
        "endLine": 208,
        "endChar": 18
      },
      "revId": "7a2aa12843e322e575b488577ffb0f445733df26",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44b3b76b_91d3a25b",
        "filename": "lib/granule/include/granule_types.h",
        "patchSetId": 11
      },
      "lineNbr": 208,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-06-10T16:14:39Z",
      "side": 1,
      "message": "with the new atomic EOR this issue is resolved.",
      "parentUuid": "b11a9fc5_83ce53ef",
      "range": {
        "startLine": 208,
        "startChar": 10,
        "endLine": 208,
        "endChar": 18
      },
      "revId": "7a2aa12843e322e575b488577ffb0f445733df26",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81b1cde3_b96b9d1c",
        "filename": "runtime/rmi/rec.c",
        "patchSetId": 11
      },
      "lineNbr": 264,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-05-20T12:38:59Z",
      "side": 1,
      "message": "the granule_get_state() API should be used here. Similar comments to all other places.",
      "range": {
        "startLine": 264,
        "startChar": 32,
        "endLine": 264,
        "endChar": 37
      },
      "revId": "7a2aa12843e322e575b488577ffb0f445733df26",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bbe2b614_4d0a1d10",
        "filename": "runtime/rmi/rec.c",
        "patchSetId": 11
      },
      "lineNbr": 264,
      "author": {
        "id": 1000105
      },
      "writtenOn": "2024-06-04T12:33:44Z",
      "side": 1,
      "message": "granule_get_state() should be called with granule lock held, but here the granule is not locked.",
      "parentUuid": "81b1cde3_b96b9d1c",
      "range": {
        "startLine": 264,
        "startChar": 32,
        "endLine": 264,
        "endChar": 37
      },
      "revId": "7a2aa12843e322e575b488577ffb0f445733df26",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b16824e9_14240b77",
        "filename": "runtime/rmi/rec.c",
        "patchSetId": 11
      },
      "lineNbr": 264,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2024-06-10T16:14:39Z",
      "side": 1,
      "message": "find_granule() will lock the granule.",
      "parentUuid": "bbe2b614_4d0a1d10",
      "range": {
        "startLine": 264,
        "startChar": 32,
        "endLine": 264,
        "endChar": 37
      },
      "revId": "7a2aa12843e322e575b488577ffb0f445733df26",
      "serverId": "8f6f209b-db1a-4cbf-aa44-c8bc30e9bfda"
    }
  ]
}