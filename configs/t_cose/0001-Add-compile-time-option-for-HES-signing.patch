From 73fefd8abb9281bfadb259cd837a826816fa3744 Mon Sep 17 00:00:00 2001
From: Mate Toth-Pal <mate.toth-pal@arm.com>
Date: Wed, 3 Jul 2024 11:22:06 +0200
Subject: [PATCH] Add compile time option for HES signing

Update signing related functions to call hes variants if
RMM_ATTESTATION_USE_HES is defined.
---
 crypto_adapters/t_cose_psa_crypto.c | 14 +++++++++++++-
 crypto_adapters/t_cose_psa_crypto.h | 28 ++++++++++++++++++++++++++--
 2 files changed, 39 insertions(+), 3 deletions(-)

diff --git a/crypto_adapters/t_cose_psa_crypto.c b/crypto_adapters/t_cose_psa_crypto.c
index 04235f1..5c21b57 100644
--- a/crypto_adapters/t_cose_psa_crypto.c
+++ b/crypto_adapters/t_cose_psa_crypto.c
@@ -119,7 +119,7 @@ bool t_cose_crypto_is_algorithm_supported(int32_t cose_algorithm_id)
  *
  * \return The PSA algorithm ID or 0 if this doesn't map the COSE ID.
  */
-static psa_algorithm_t cose_alg_id_to_psa_alg_id(int32_t cose_alg_id)
+psa_algorithm_t cose_alg_id_to_psa_alg_id(int32_t cose_alg_id)
 {
     /* The #ifdefs save a little code when algorithms are disabled */
     switch(cose_alg_id) {
@@ -226,6 +226,11 @@ t_cose_crypto_sign(int32_t                cose_algorithm_id,
                    struct q_useful_buf    signature_buffer,
                    struct q_useful_buf_c *signature)
 {
+#if RMM_ATTESTATION_USE_HES
+    return t_cose_crypto_sign_hes(
+        cose_algorithm_id, signing_key, crypto_context,
+        hash_to_sign, signature_buffer, signature);
+#else
     enum t_cose_err_t     return_value;
     psa_status_t          psa_result;
     psa_algorithm_t       psa_alg_id;
@@ -264,6 +269,7 @@ t_cose_crypto_sign(int32_t                cose_algorithm_id,

   Done:
      return return_value;
+#endif
 }


@@ -280,6 +286,11 @@ t_cose_crypto_sign_restart(bool                   started,
                            struct q_useful_buf    signature_buffer,
                            struct q_useful_buf_c *signature)
 {
+#if RMM_ATTESTATION_USE_HES
+    return t_cose_crypto_sign_restart_hes(
+        started, cose_algorithm_id, signing_key, crypto_context,
+        hash_to_sign, signature_buffer, signature);
+#else
     enum t_cose_err_t     return_value;
     psa_status_t          psa_result;
     psa_algorithm_t       psa_alg_id;
@@ -333,6 +344,7 @@ t_cose_crypto_sign_restart(bool                   started,

 Done:
      return return_value;
+#endif
 }
 #endif /* PSA_CRYPTO_HAS_RESTARTABLE_SIGNING */

diff --git a/crypto_adapters/t_cose_psa_crypto.h b/crypto_adapters/t_cose_psa_crypto.h
index bf4963c..a75f2ec 100644
--- a/crypto_adapters/t_cose_psa_crypto.h
+++ b/crypto_adapters/t_cose_psa_crypto.h
@@ -15,13 +15,37 @@
 #include <psa/crypto.h>

 #define PSA_CRYPTO_HAS_RESTARTABLE_SIGNING \
-    ((MBEDTLS_VERSION_MAJOR == 3 && MBEDTLS_VERSION_MINOR >= 4) || \
-     MBEDTLS_VERSION_MAJOR > 3)
+    (((MBEDTLS_VERSION_MAJOR == 3 && MBEDTLS_VERSION_MINOR >= 4) || \
+     MBEDTLS_VERSION_MAJOR > 3) || RMM_ATTESTATION_USE_HES)

 #if PSA_CRYPTO_HAS_RESTARTABLE_SIGNING
 struct t_cose_psa_crypto_context {
     psa_sign_hash_interruptible_operation_t operation;
 };
+
+psa_algorithm_t cose_alg_id_to_psa_alg_id(int32_t cose_alg_id);
+
+#if RMM_ATTESTATION_USE_HES
+enum t_cose_err_t
+t_cose_crypto_sign_restart_hes(bool                   started,
+                               int32_t                cose_algorithm_id,
+                               struct t_cose_key      signing_key,
+                               void                  *crypto_context,
+                               struct q_useful_buf_c  hash_to_sign,
+                               struct q_useful_buf    signature_buffer,
+                               struct q_useful_buf_c *signature);
+#endif /* RMM_ATTESTATION_USE_HES */
+
 #endif /* PSA_CRYPTO_HAS_RESTARTABLE_SIGNING */

+#if RMM_ATTESTATION_USE_HES
+enum t_cose_err_t t_cose_crypto_sign_hes(int32_t cose_algorithm_id,
+				         struct t_cose_key signing_key,
+				         void *crypto_context,
+				         struct q_useful_buf_c hash_to_sign,
+				         struct q_useful_buf signature_buffer,
+				         struct q_useful_buf_c *signature);
+#endif /* RMM_ATTESTATION_USE_HES */
+
+
 #endif /* t_cose_psa_crypto_h */
--
2.25.1

